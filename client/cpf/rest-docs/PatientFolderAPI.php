<?php

/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 *
 */
 

  namespace Au\Com\Infomedix\Udr\Rest\Common\Dto {

    /**
     * 
     */
    class ActivityFeedDTO  {
    
      /**
       * (no documentation provided)
       */
      private $src;
    
      /**
       * (no documentation provided)
       */
      private $urno;
      /**
       * (no documentation provided)
       */
      private $patientNs;
      /**
       * (no documentation provided)
       */
      private $electronicAlerts;
      /**
       * (no documentation provided)
       */
      private $scannedAlerts;
      /**
       * (no documentation provided)
       */
      private $documents;
      /**
       * (no documentation provided)
       */
      private $results;
      /**
       * (no documentation provided)
       */
      private $episodes;

      /**
       * Constructs a ActivityFeedDTO from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * (no documentation provided)
       */
      public function getSrc() {
        return $this->src;
      }
      
      /**
       * (no documentation provided)
       */
      public function setSrc($src) {
        $this->src = $src;
      }
      /**
       * (no documentation provided)
       */
      public function getUrno() {
        return $this->urno;
      }
      
      /**
       * (no documentation provided)
       */
      public function setUrno($urno) {
        $this->urno = $urno;
      }
      /**
       * (no documentation provided)
       */
      public function getPatientNs() {
        return $this->patientNs;
      }
      
      /**
       * (no documentation provided)
       */
      public function setPatientNs($patientNs) {
        $this->patientNs = $patientNs;
      }
      /**
       * (no documentation provided)
       */
      public function getElectronicAlerts() {
        return $this->electronicAlerts;
      }
      
      /**
       * (no documentation provided)
       */
      public function setElectronicAlerts($electronicAlerts) {
        $this->electronicAlerts = $electronicAlerts;
      }
      /**
       * (no documentation provided)
       */
      public function getScannedAlerts() {
        return $this->scannedAlerts;
      }
      
      /**
       * (no documentation provided)
       */
      public function setScannedAlerts($scannedAlerts) {
        $this->scannedAlerts = $scannedAlerts;
      }
      /**
       * (no documentation provided)
       */
      public function getDocuments() {
        return $this->documents;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDocuments($documents) {
        $this->documents = $documents;
      }
      /**
       * (no documentation provided)
       */
      public function getResults() {
        return $this->results;
      }
      
      /**
       * (no documentation provided)
       */
      public function setResults($results) {
        $this->results = $results;
      }
      /**
       * (no documentation provided)
       */
      public function getEpisodes() {
        return $this->episodes;
      }
      
      /**
       * (no documentation provided)
       */
      public function setEpisodes($episodes) {
        $this->episodes = $episodes;
      }
      /**
       * Returns the associative array for this ActivityFeedDTO
       */
      public function toArray() {
        $a = array();
        if( $this->src ) {
          $a["src"] = $this->src;
        }
        if( $this->urno ) {
          $a["Urno"] = $this->urno;
        }
        if( $this->patientNs ) {
          $a["PatientNs"] = $this->patientNs;
        }
        if( $this->electronicAlerts ) {
          $a["ElectronicAlerts"] = $this->electronicAlerts->toArray();
        }
        if( $this->scannedAlerts ) {
          $a["ScannedAlerts"] = $this->scannedAlerts->toArray();
        }
        if( $this->documents ) {
          $a["Documents"] = $this->documents->toArray();
        }
        if( $this->results ) {
          $a["results"] = $this->results->toArray();
        }
        if( $this->episodes ) {
          $a["Episodes"] = $this->episodes->toArray();
        }
        return $a;
      }
      
      /**
       * Returns the JSON string for this ActivityFeedDTO
       */
      public function toJson() {
        return json_encode($this->toArray());
      }

      /**
       * Initializes this ActivityFeedDTO from an associative array
       */
      public function initFromArray($o) {
        if( isset($o['src']) ) {
          $this->src = $o["src"];
        }
        if( isset($o['Urno']) ) {
          $this->urno = $o["Urno"];
        }
        if( isset($o['PatientNs']) ) {
          $this->patientNs = $o["PatientNs"];
        }
        if( isset($o['ElectronicAlerts']) ) {
          $this->electronicAlerts = new \Au\Com\Infomedix\Udr\Rest\Common\Dto\ListDTO($o["ElectronicAlerts"]);
        }
        if( isset($o['ScannedAlerts']) ) {
          $this->scannedAlerts = new \Au\Com\Infomedix\Udr\Rest\Common\Dto\ListDTO($o["ScannedAlerts"]);
        }
        if( isset($o['Documents']) ) {
          $this->documents = new \Au\Com\Infomedix\Udr\Rest\Common\Dto\ListDTO($o["Documents"]);
        }
        if( isset($o['results']) ) {
          $this->results = new \Au\Com\Infomedix\Udr\Rest\Common\Dto\ListDTO($o["results"]);
        }
        if( isset($o['Episodes']) ) {
          $this->episodes = new \Au\Com\Infomedix\Udr\Rest\Common\Dto\ListDTO($o["Episodes"]);
        }
      }
    
    }
    
  }


  namespace Au\Com\Infomedix\Cpfmodel\Txn {

    /**
     * 
     */
    class Status  {
    
    
      /**
       * (no documentation provided)
       */
      private $id;
      /**
       * (no documentation provided)
       */
      private $text;
      /**
       * (no documentation provided)
       */
      private $orderControl;

      /**
       * Constructs a Status from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * (no documentation provided)
       */
      public function getId() {
        return $this->id;
      }
      
      /**
       * (no documentation provided)
       */
      public function setId($id) {
        $this->id = $id;
      }
      /**
       * (no documentation provided)
       */
      public function getText() {
        return $this->text;
      }
      
      /**
       * (no documentation provided)
       */
      public function setText($text) {
        $this->text = $text;
      }
      /**
       * (no documentation provided)
       */
      public function getOrderControl() {
        return $this->orderControl;
      }
      
      /**
       * (no documentation provided)
       */
      public function setOrderControl($orderControl) {
        $this->orderControl = $orderControl;
      }
      /**
       * Returns the associative array for this Status
       */
      public function toArray() {
        $a = array();
        if( $this->id ) {
          $a["id"] = $this->id;
        }
        if( $this->text ) {
          $a["text"] = $this->text;
        }
        if( $this->orderControl ) {
          $a["order_control"] = $this->orderControl->toArray();
        }
        return $a;
      }
      
      /**
       * Returns the JSON string for this Status
       */
      public function toJson() {
        return json_encode($this->toArray());
      }

      /**
       * Initializes this Status from an associative array
       */
      public function initFromArray($o) {
        if( isset($o['id']) ) {
          $this->id = $o["id"];
        }
        if( isset($o['text']) ) {
          $this->text = $o["text"];
        }
        if( isset($o['order_control']) ) {
          $this->orderControl = new \Au\Com\Infomedix\Cpfmodel\Txn\ItemIdent($o["order_control"]);
        }
      }
    
    }
    
  }


  namespace Au\Com\Infomedix\Udr\Rest\Common\Dto {

    /**
     * 
     */
    class AtomicDTO  {
    
    
      /**
       * (no documentation provided)
       */
      private $valueTypeID;
      /**
       * (no documentation provided)
       */
      private $valueTypeText;
      /**
       * (no documentation provided)
       */
      private $value;
      /**
       * (no documentation provided)
       */
      private $units;
      /**
       * (no documentation provided)
       */
      private $referenceRange;
      /**
       * (no documentation provided)
       */
      private $abnormalFLagText;
      /**
       * (no documentation provided)
       */
      private $natureOfAbnormalTest;
      /**
       * (no documentation provided)
       */
      private $statusText;

      /**
       * Constructs a AtomicDTO from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * (no documentation provided)
       */
      public function getValueTypeID() {
        return $this->valueTypeID;
      }
      
      /**
       * (no documentation provided)
       */
      public function setValueTypeID($valueTypeID) {
        $this->valueTypeID = $valueTypeID;
      }
      /**
       * (no documentation provided)
       */
      public function getValueTypeText() {
        return $this->valueTypeText;
      }
      
      /**
       * (no documentation provided)
       */
      public function setValueTypeText($valueTypeText) {
        $this->valueTypeText = $valueTypeText;
      }
      /**
       * (no documentation provided)
       */
      public function getValue() {
        return $this->value;
      }
      
      /**
       * (no documentation provided)
       */
      public function setValue($value) {
        $this->value = $value;
      }
      /**
       * (no documentation provided)
       */
      public function getUnits() {
        return $this->units;
      }
      
      /**
       * (no documentation provided)
       */
      public function setUnits($units) {
        $this->units = $units;
      }
      /**
       * (no documentation provided)
       */
      public function getReferenceRange() {
        return $this->referenceRange;
      }
      
      /**
       * (no documentation provided)
       */
      public function setReferenceRange($referenceRange) {
        $this->referenceRange = $referenceRange;
      }
      /**
       * (no documentation provided)
       */
      public function getAbnormalFLagText() {
        return $this->abnormalFLagText;
      }
      
      /**
       * (no documentation provided)
       */
      public function setAbnormalFLagText($abnormalFLagText) {
        $this->abnormalFLagText = $abnormalFLagText;
      }
      /**
       * (no documentation provided)
       */
      public function getNatureOfAbnormalTest() {
        return $this->natureOfAbnormalTest;
      }
      
      /**
       * (no documentation provided)
       */
      public function setNatureOfAbnormalTest($natureOfAbnormalTest) {
        $this->natureOfAbnormalTest = $natureOfAbnormalTest;
      }
      /**
       * (no documentation provided)
       */
      public function getStatusText() {
        return $this->statusText;
      }
      
      /**
       * (no documentation provided)
       */
      public function setStatusText($statusText) {
        $this->statusText = $statusText;
      }
      /**
       * Returns the associative array for this AtomicDTO
       */
      public function toArray() {
        $a = array();
        if( $this->valueTypeID ) {
          $a["valueTypeID"] = $this->valueTypeID;
        }
        if( $this->valueTypeText ) {
          $a["valueTypeText"] = $this->valueTypeText;
        }
        if( $this->value ) {
          $a["value"] = $this->value;
        }
        if( $this->units ) {
          $a["units"] = $this->units;
        }
        if( $this->referenceRange ) {
          $a["referenceRange"] = $this->referenceRange;
        }
        if( $this->abnormalFLagText ) {
          $a["abnormalFLagText"] = $this->abnormalFLagText;
        }
        if( $this->natureOfAbnormalTest ) {
          $a["natureOfAbnormalTest"] = $this->natureOfAbnormalTest;
        }
        if( $this->statusText ) {
          $a["statusText"] = $this->statusText;
        }
        return $a;
      }
      
      /**
       * Returns the JSON string for this AtomicDTO
       */
      public function toJson() {
        return json_encode($this->toArray());
      }

      /**
       * Initializes this AtomicDTO from an associative array
       */
      public function initFromArray($o) {
        if( isset($o['valueTypeID']) ) {
          $this->valueTypeID = $o["valueTypeID"];
        }
        if( isset($o['valueTypeText']) ) {
          $this->valueTypeText = $o["valueTypeText"];
        }
        if( isset($o['value']) ) {
          $this->value = $o["value"];
        }
        if( isset($o['units']) ) {
          $this->units = $o["units"];
        }
        if( isset($o['referenceRange']) ) {
          $this->referenceRange = $o["referenceRange"];
        }
        if( isset($o['abnormalFLagText']) ) {
          $this->abnormalFLagText = $o["abnormalFLagText"];
        }
        if( isset($o['natureOfAbnormalTest']) ) {
          $this->natureOfAbnormalTest = $o["natureOfAbnormalTest"];
        }
        if( isset($o['statusText']) ) {
          $this->statusText = $o["statusText"];
        }
      }
    
    }
    
  }


  namespace Au\Com\Infomedix\Udr\Rest\Common\Dto {

    /**
     * 
     */
    class DocTypeSpecificDTO  {
    
    

      /**
       * Constructs a DocTypeSpecificDTO from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * Returns the associative array for this DocTypeSpecificDTO
       */
      public function toArray() {
        $a = array();
        return $a;
      }
      
      /**
       * Returns the JSON string for this DocTypeSpecificDTO
       */
      public function toJson() {
        return json_encode($this->toArray());
      }

      /**
       * Initializes this DocTypeSpecificDTO from an associative array
       */
      public function initFromArray($o) {
      }
    
    }
    
  }


  namespace Au\Com\Infomedix\Udr\Rest\Common\Dto {

    /**
     * 
     */
    class EntryDTO  {
    
    
      /**
       * (no documentation provided)
       */
      private $name;
      /**
       * (no documentation provided)
       */
      private $label;

      /**
       * Constructs a EntryDTO from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * (no documentation provided)
       */
      public function getName() {
        return $this->name;
      }
      
      /**
       * (no documentation provided)
       */
      public function setName($name) {
        $this->name = $name;
      }
      /**
       * (no documentation provided)
       */
      public function getLabel() {
        return $this->label;
      }
      
      /**
       * (no documentation provided)
       */
      public function setLabel($label) {
        $this->label = $label;
      }
      /**
       * Returns the associative array for this EntryDTO
       */
      public function toArray() {
        $a = array();
        if( $this->name ) {
          $a["name"] = $this->name;
        }
        if( $this->label ) {
          $a["label"] = $this->label;
        }
        return $a;
      }
      
      /**
       * Returns the JSON string for this EntryDTO
       */
      public function toJson() {
        return json_encode($this->toArray());
      }

      /**
       * Initializes this EntryDTO from an associative array
       */
      public function initFromArray($o) {
        if( isset($o['name']) ) {
          $this->name = $o["name"];
        }
        if( isset($o['label']) ) {
          $this->label = $o["label"];
        }
      }
    
    }
    
  }


  namespace Au\Com\Infomedix\Udr\Rest\Common\Dto {

    /**
     * 
     */
    class ExtIdDTO  {
    
    
      /**
       * (no documentation provided)
       */
      private $extIdVal;
      /**
       * (no documentation provided)
       */
      private $extNsVal;

      /**
       * Constructs a ExtIdDTO from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * (no documentation provided)
       */
      public function getExtIdVal() {
        return $this->extIdVal;
      }
      
      /**
       * (no documentation provided)
       */
      public function setExtIdVal($extIdVal) {
        $this->extIdVal = $extIdVal;
      }
      /**
       * (no documentation provided)
       */
      public function getExtNsVal() {
        return $this->extNsVal;
      }
      
      /**
       * (no documentation provided)
       */
      public function setExtNsVal($extNsVal) {
        $this->extNsVal = $extNsVal;
      }
      /**
       * Returns the associative array for this ExtIdDTO
       */
      public function toArray() {
        $a = array();
        if( $this->extIdVal ) {
          $a["extIdVal"] = $this->extIdVal;
        }
        if( $this->extNsVal ) {
          $a["extNsVal"] = $this->extNsVal;
        }
        return $a;
      }
      
      /**
       * Returns the JSON string for this ExtIdDTO
       */
      public function toJson() {
        return json_encode($this->toArray());
      }

      /**
       * Initializes this ExtIdDTO from an associative array
       */
      public function initFromArray($o) {
        if( isset($o['extIdVal']) ) {
          $this->extIdVal = $o["extIdVal"];
        }
        if( isset($o['extNsVal']) ) {
          $this->extNsVal = $o["extNsVal"];
        }
      }
    
    }
    
  }


  namespace Au\Com\Infomedix\Udr\Rest\Common\Dto {

    /**
     * 
     */
    class ListDTO  {
    
    
      /**
       * (no documentation provided)
       */
      private $results;
      /**
       * (no documentation provided)
       */
      private $total;

      /**
       * Constructs a ListDTO from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * (no documentation provided)
       */
      public function getResults() {
        return $this->results;
      }
      
      /**
       * (no documentation provided)
       */
      public function setResults($results) {
        $this->results = $results;
      }
      /**
       * (no documentation provided)
       */
      public function getTotal() {
        return $this->total;
      }
      
      /**
       * (no documentation provided)
       */
      public function setTotal($total) {
        $this->total = $total;
      }
      /**
       * Returns the associative array for this ListDTO
       */
      public function toArray() {
        $a = array();
        if( $this->results ) {
          $ab = array();
          foreach( $this->results as $i => $x ) {
            $ab[$i] = (array) $x;
          }
          $a['result'] = $ab;
        }
        if( $this->total ) {
          $a["total"] = $this->total;
        }
        return $a;
      }
      
      /**
       * Returns the JSON string for this ListDTO
       */
      public function toJson() {
        return json_encode($this->toArray());
      }

      /**
       * Initializes this ListDTO from an associative array
       */
      public function initFromArray($o) {
        $this->results = array();
        if( isset($o['result']) ) {
          foreach( $o['result'] as $i => $x ) {
            $this->results[$i] = (object) $x;
          }
        }
        if( isset($o['total']) ) {
          $this->total = $o["total"];
        }
      }
    
    }
    
  }


  namespace Au\Com\Infomedix\Udr\Rest\Common\Dto {

    /**
     * 
     */
    class OrderDTO  {
    
    
      /**
       * (no documentation provided)
       */
      private $id;
      /**
       * (no documentation provided)
       */
      private $status;
      /**
       * (no documentation provided)
       */
      private $enteringUser;
      /**
       * (no documentation provided)
       */
      private $actionedUser;
      /**
       * (no documentation provided)
       */
      private $organisation;
      /**
       * (no documentation provided)
       */
      private $doctor;

      /**
       * Constructs a OrderDTO from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * (no documentation provided)
       */
      public function getId() {
        return $this->id;
      }
      
      /**
       * (no documentation provided)
       */
      public function setId($id) {
        $this->id = $id;
      }
      /**
       * (no documentation provided)
       */
      public function getStatus() {
        return $this->status;
      }
      
      /**
       * (no documentation provided)
       */
      public function setStatus($status) {
        $this->status = $status;
      }
      /**
       * (no documentation provided)
       */
      public function getEnteringUser() {
        return $this->enteringUser;
      }
      
      /**
       * (no documentation provided)
       */
      public function setEnteringUser($enteringUser) {
        $this->enteringUser = $enteringUser;
      }
      /**
       * (no documentation provided)
       */
      public function getActionedUser() {
        return $this->actionedUser;
      }
      
      /**
       * (no documentation provided)
       */
      public function setActionedUser($actionedUser) {
        $this->actionedUser = $actionedUser;
      }
      /**
       * (no documentation provided)
       */
      public function getOrganisation() {
        return $this->organisation;
      }
      
      /**
       * (no documentation provided)
       */
      public function setOrganisation($organisation) {
        $this->organisation = $organisation;
      }
      /**
       * (no documentation provided)
       */
      public function getDoctor() {
        return $this->doctor;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDoctor($doctor) {
        $this->doctor = $doctor;
      }
      /**
       * Returns the associative array for this OrderDTO
       */
      public function toArray() {
        $a = array();
        if( $this->id ) {
          $a["id"] = $this->id;
        }
        if( $this->status ) {
          $a["status"] = $this->status->toArray();
        }
        if( $this->enteringUser ) {
          $a["enteringUser"] = $this->enteringUser;
        }
        if( $this->actionedUser ) {
          $a["actionedUser"] = $this->actionedUser;
        }
        if( $this->organisation ) {
          $a["organisation"] = $this->organisation;
        }
        if( $this->doctor ) {
          $a["doctor"] = $this->doctor;
        }
        return $a;
      }
      
      /**
       * Returns the JSON string for this OrderDTO
       */
      public function toJson() {
        return json_encode($this->toArray());
      }

      /**
       * Initializes this OrderDTO from an associative array
       */
      public function initFromArray($o) {
        if( isset($o['id']) ) {
          $this->id = $o["id"];
        }
        if( isset($o['status']) ) {
          $this->status = new \Au\Com\Infomedix\Cpfmodel\Txn\Status($o["status"]);
        }
        if( isset($o['enteringUser']) ) {
          $this->enteringUser = $o["enteringUser"];
        }
        if( isset($o['actionedUser']) ) {
          $this->actionedUser = $o["actionedUser"];
        }
        if( isset($o['organisation']) ) {
          $this->organisation = $o["organisation"];
        }
        if( isset($o['doctor']) ) {
          $this->doctor = $o["doctor"];
        }
      }
    
    }
    
  }


  namespace Au\Com\Infomedix\Udr\Rest\Common\Dto {

    /**
     * 
     */
    class PatientDTO  {
    
      /**
       * (no documentation provided)
       */
      private $src;
    
      /**
       * (no documentation provided)
       */
      private $extIds;
      /**
       * (no documentation provided)
       */
      private $patientMasterId;
      /**
       * (no documentation provided)
       */
      private $firstName;
      /**
       * (no documentation provided)
       */
      private $lastName;
      /**
       * (no documentation provided)
       */
      private $otherNames;
      /**
       * (no documentation provided)
       */
      private $dob;
      /**
       * (no documentation provided)
       */
      private $dod;
      /**
       * (no documentation provided)
       */
      private $sex;
      /**
       * (no documentation provided)
       */
      private $addr1;
      /**
       * (no documentation provided)
       */
      private $addr2;
      /**
       * (no documentation provided)
       */
      private $city;
      /**
       * (no documentation provided)
       */
      private $postcode;
      /**
       * (no documentation provided)
       */
      private $infoFields;

      /**
       * Constructs a PatientDTO from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * (no documentation provided)
       */
      public function getSrc() {
        return $this->src;
      }
      
      /**
       * (no documentation provided)
       */
      public function setSrc($src) {
        $this->src = $src;
      }
      /**
       * (no documentation provided)
       */
      public function getExtIds() {
        return $this->extIds;
      }
      
      /**
       * (no documentation provided)
       */
      public function setExtIds($extIds) {
        $this->extIds = $extIds;
      }
      /**
       * (no documentation provided)
       */
      public function getPatientMasterId() {
        return $this->patientMasterId;
      }
      
      /**
       * (no documentation provided)
       */
      public function setPatientMasterId($patientMasterId) {
        $this->patientMasterId = $patientMasterId;
      }
      /**
       * (no documentation provided)
       */
      public function getFirstName() {
        return $this->firstName;
      }
      
      /**
       * (no documentation provided)
       */
      public function setFirstName($firstName) {
        $this->firstName = $firstName;
      }
      /**
       * (no documentation provided)
       */
      public function getLastName() {
        return $this->lastName;
      }
      
      /**
       * (no documentation provided)
       */
      public function setLastName($lastName) {
        $this->lastName = $lastName;
      }
      /**
       * (no documentation provided)
       */
      public function getOtherNames() {
        return $this->otherNames;
      }
      
      /**
       * (no documentation provided)
       */
      public function setOtherNames($otherNames) {
        $this->otherNames = $otherNames;
      }
      /**
       * (no documentation provided)
       */
      public function getDob() {
        return $this->dob;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDob($dob) {
        $this->dob = $dob;
      }
      /**
       * (no documentation provided)
       */
      public function getDod() {
        return $this->dod;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDod($dod) {
        $this->dod = $dod;
      }
      /**
       * (no documentation provided)
       */
      public function getSex() {
        return $this->sex;
      }
      
      /**
       * (no documentation provided)
       */
      public function setSex($sex) {
        $this->sex = $sex;
      }
      /**
       * (no documentation provided)
       */
      public function getAddr1() {
        return $this->addr1;
      }
      
      /**
       * (no documentation provided)
       */
      public function setAddr1($addr1) {
        $this->addr1 = $addr1;
      }
      /**
       * (no documentation provided)
       */
      public function getAddr2() {
        return $this->addr2;
      }
      
      /**
       * (no documentation provided)
       */
      public function setAddr2($addr2) {
        $this->addr2 = $addr2;
      }
      /**
       * (no documentation provided)
       */
      public function getCity() {
        return $this->city;
      }
      
      /**
       * (no documentation provided)
       */
      public function setCity($city) {
        $this->city = $city;
      }
      /**
       * (no documentation provided)
       */
      public function getPostcode() {
        return $this->postcode;
      }
      
      /**
       * (no documentation provided)
       */
      public function setPostcode($postcode) {
        $this->postcode = $postcode;
      }
      /**
       * (no documentation provided)
       */
      public function getInfoFields() {
        return $this->infoFields;
      }
      
      /**
       * (no documentation provided)
       */
      public function setInfoFields($infoFields) {
        $this->infoFields = $infoFields;
      }
      /**
       * Returns the associative array for this PatientDTO
       */
      public function toArray() {
        $a = array();
        if( $this->src ) {
          $a["src"] = $this->src;
        }
        if( $this->extIds ) {
          $ab = array();
          foreach( $this->extIds as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['extIds'] = $ab;
        }
        if( $this->patientMasterId ) {
          $a["patientMasterId"] = $this->patientMasterId;
        }
        if( $this->firstName ) {
          $a["firstName"] = $this->firstName;
        }
        if( $this->lastName ) {
          $a["lastName"] = $this->lastName;
        }
        if( $this->otherNames ) {
          $a["otherNames"] = $this->otherNames;
        }
        if( $this->dob ) {
          $a["dob"] = $this->dob;
        }
        if( $this->dod ) {
          $a["dod"] = $this->dod;
        }
        if( $this->sex ) {
          $a["sex"] = $this->sex;
        }
        if( $this->addr1 ) {
          $a["addr1"] = $this->addr1;
        }
        if( $this->addr2 ) {
          $a["addr2"] = $this->addr2;
        }
        if( $this->city ) {
          $a["city"] = $this->city;
        }
        if( $this->postcode ) {
          $a["postcode"] = $this->postcode;
        }
        if( $this->infoFields ) {
          $ab = array();
          foreach( $this->infoFields as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['infoFields'] = $ab;
        }
        return $a;
      }
      
      /**
       * Returns the JSON string for this PatientDTO
       */
      public function toJson() {
        return json_encode($this->toArray());
      }

      /**
       * Initializes this PatientDTO from an associative array
       */
      public function initFromArray($o) {
        if( isset($o['src']) ) {
          $this->src = $o["src"];
        }
        $this->extIds = array();
        if( isset($o['extIds']) ) {
          foreach( $o['extIds'] as $i => $x ) {
            $this->extIds[$i] = new \Au\Com\Infomedix\Udr\Rest\Common\Dto\ExtIdDTO($x);
          }
        }
        if( isset($o['patientMasterId']) ) {
          $this->patientMasterId = $o["patientMasterId"];
        }
        if( isset($o['firstName']) ) {
          $this->firstName = $o["firstName"];
        }
        if( isset($o['lastName']) ) {
          $this->lastName = $o["lastName"];
        }
        if( isset($o['otherNames']) ) {
          $this->otherNames = $o["otherNames"];
        }
        if( isset($o['dob']) ) {
          $this->dob = $o["dob"];
        }
        if( isset($o['dod']) ) {
          $this->dod = $o["dod"];
        }
        if( isset($o['sex']) ) {
          $this->sex = $o["sex"];
        }
        if( isset($o['addr1']) ) {
          $this->addr1 = $o["addr1"];
        }
        if( isset($o['addr2']) ) {
          $this->addr2 = $o["addr2"];
        }
        if( isset($o['city']) ) {
          $this->city = $o["city"];
        }
        if( isset($o['postcode']) ) {
          $this->postcode = $o["postcode"];
        }
        $this->infoFields = array();
        if( isset($o['infoFields']) ) {
          foreach( $o['infoFields'] as $i => $x ) {
            $this->infoFields[$i] = new \Au\Com\Infomedix\Udr\Rest\Common\Dto\PatientInfoFieldDTO($x);
          }
        }
      }
    
    }
    
  }


  namespace Au\Com\Infomedix\Udr\Rest\Common\Dto {

    /**
     * 
     */
    class PatientInfoFieldDTO  {
    
    
      /**
       * (no documentation provided)
       */
      private $name;
      /**
       * (no documentation provided)
       */
      private $value;

      /**
       * Constructs a PatientInfoFieldDTO from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * (no documentation provided)
       */
      public function getName() {
        return $this->name;
      }
      
      /**
       * (no documentation provided)
       */
      public function setName($name) {
        $this->name = $name;
      }
      /**
       * (no documentation provided)
       */
      public function getValue() {
        return $this->value;
      }
      
      /**
       * (no documentation provided)
       */
      public function setValue($value) {
        $this->value = $value;
      }
      /**
       * Returns the associative array for this PatientInfoFieldDTO
       */
      public function toArray() {
        $a = array();
        if( $this->name ) {
          $a["name"] = $this->name;
        }
        if( $this->value ) {
          $a["value"] = $this->value;
        }
        return $a;
      }
      
      /**
       * Returns the JSON string for this PatientInfoFieldDTO
       */
      public function toJson() {
        return json_encode($this->toArray());
      }

      /**
       * Initializes this PatientInfoFieldDTO from an associative array
       */
      public function initFromArray($o) {
        if( isset($o['name']) ) {
          $this->name = $o["name"];
        }
        if( isset($o['value']) ) {
          $this->value = $o["value"];
        }
      }
    
    }
    
  }


  namespace Au\Com\Infomedix\Udr\Rest\Common\Dto {

    /**
     * 
     */
    class RequestDTO  {
    
    
      /**
       * (no documentation provided)
       */
      private $requestId;
      /**
       * (no documentation provided)
       */
      private $requestType;
      /**
       * (no documentation provided)
       */
      private $serviceDesc;
      /**
       * (no documentation provided)
       */
      private $requestStatus;
      /**
       * (no documentation provided)
       */
      private $requestDate;
      /**
       * (no documentation provided)
       */
      private $obsStart;
      /**
       * (no documentation provided)
       */
      private $obsStop;
      /**
       * (no documentation provided)
       */
      private $specimenRec;
      /**
       * (no documentation provided)
       */
      private $clinicalInformation;

      /**
       * Constructs a RequestDTO from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * (no documentation provided)
       */
      public function getRequestId() {
        return $this->requestId;
      }
      
      /**
       * (no documentation provided)
       */
      public function setRequestId($requestId) {
        $this->requestId = $requestId;
      }
      /**
       * (no documentation provided)
       */
      public function getRequestType() {
        return $this->requestType;
      }
      
      /**
       * (no documentation provided)
       */
      public function setRequestType($requestType) {
        $this->requestType = $requestType;
      }
      /**
       * (no documentation provided)
       */
      public function getServiceDesc() {
        return $this->serviceDesc;
      }
      
      /**
       * (no documentation provided)
       */
      public function setServiceDesc($serviceDesc) {
        $this->serviceDesc = $serviceDesc;
      }
      /**
       * (no documentation provided)
       */
      public function getRequestStatus() {
        return $this->requestStatus;
      }
      
      /**
       * (no documentation provided)
       */
      public function setRequestStatus($requestStatus) {
        $this->requestStatus = $requestStatus;
      }
      /**
       * (no documentation provided)
       */
      public function getRequestDate() {
        return $this->requestDate;
      }
      
      /**
       * (no documentation provided)
       */
      public function setRequestDate($requestDate) {
        $this->requestDate = $requestDate;
      }
      /**
       * (no documentation provided)
       */
      public function getObsStart() {
        return $this->obsStart;
      }
      
      /**
       * (no documentation provided)
       */
      public function setObsStart($obsStart) {
        $this->obsStart = $obsStart;
      }
      /**
       * (no documentation provided)
       */
      public function getObsStop() {
        return $this->obsStop;
      }
      
      /**
       * (no documentation provided)
       */
      public function setObsStop($obsStop) {
        $this->obsStop = $obsStop;
      }
      /**
       * (no documentation provided)
       */
      public function getSpecimenRec() {
        return $this->specimenRec;
      }
      
      /**
       * (no documentation provided)
       */
      public function setSpecimenRec($specimenRec) {
        $this->specimenRec = $specimenRec;
      }
      /**
       * (no documentation provided)
       */
      public function getClinicalInformation() {
        return $this->clinicalInformation;
      }
      
      /**
       * (no documentation provided)
       */
      public function setClinicalInformation($clinicalInformation) {
        $this->clinicalInformation = $clinicalInformation;
      }
      /**
       * Returns the associative array for this RequestDTO
       */
      public function toArray() {
        $a = array();
        if( $this->requestId ) {
          $a["requestId"] = $this->requestId;
        }
        if( $this->requestType ) {
          $a["requestType"] = $this->requestType;
        }
        if( $this->serviceDesc ) {
          $a["serviceDesc"] = $this->serviceDesc;
        }
        if( $this->requestStatus ) {
          $a["requestStatus"] = $this->requestStatus;
        }
        if( $this->requestDate ) {
          $a["requestDate"] = $this->requestDate;
        }
        if( $this->obsStart ) {
          $a["obsStart"] = $this->obsStart;
        }
        if( $this->obsStop ) {
          $a["obsStop"] = $this->obsStop;
        }
        if( $this->specimenRec ) {
          $a["specimenRec"] = $this->specimenRec;
        }
        if( $this->clinicalInformation ) {
          $a["clinicalInformation"] = $this->clinicalInformation;
        }
        return $a;
      }
      
      /**
       * Returns the JSON string for this RequestDTO
       */
      public function toJson() {
        return json_encode($this->toArray());
      }

      /**
       * Initializes this RequestDTO from an associative array
       */
      public function initFromArray($o) {
        if( isset($o['requestId']) ) {
          $this->requestId = $o["requestId"];
        }
        if( isset($o['requestType']) ) {
          $this->requestType = $o["requestType"];
        }
        if( isset($o['serviceDesc']) ) {
          $this->serviceDesc = $o["serviceDesc"];
        }
        if( isset($o['requestStatus']) ) {
          $this->requestStatus = $o["requestStatus"];
        }
        if( isset($o['requestDate']) ) {
          $this->requestDate = $o["requestDate"];
        }
        if( isset($o['obsStart']) ) {
          $this->obsStart = $o["obsStart"];
        }
        if( isset($o['obsStop']) ) {
          $this->obsStop = $o["obsStop"];
        }
        if( isset($o['specimenRec']) ) {
          $this->specimenRec = $o["specimenRec"];
        }
        if( isset($o['clinicalInformation']) ) {
          $this->clinicalInformation = $o["clinicalInformation"];
        }
      }
    
    }
    
  }


  namespace Au\Com\Infomedix\Udr\Rest\Common\Dto {

    /**
     * 
     */
    class SectionDTO  {
    
      /**
       * (no documentation provided)
       */
      private $src;
    
      /**
       * (no documentation provided)
       */
      private $id;
      /**
       * (no documentation provided)
       */
      private $name;
      /**
       * (no documentation provided)
       */
      private $episodal;
      /**
       * (no documentation provided)
       */
      private $diagnostic;
      /**
       * (no documentation provided)
       */
      private $episodeType;
      /**
       * (no documentation provided)
       */
      private $rgbColor;
      /**
       * (no documentation provided)
       */
      private $docCount;
      /**
       * (no documentation provided)
       */
      private $episodeCount;
      /**
       * (no documentation provided)
       */
      private $lastModifiedTimestamp;

      /**
       * Constructs a SectionDTO from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * (no documentation provided)
       */
      public function getSrc() {
        return $this->src;
      }
      
      /**
       * (no documentation provided)
       */
      public function setSrc($src) {
        $this->src = $src;
      }
      /**
       * (no documentation provided)
       */
      public function getId() {
        return $this->id;
      }
      
      /**
       * (no documentation provided)
       */
      public function setId($id) {
        $this->id = $id;
      }
      /**
       * (no documentation provided)
       */
      public function getName() {
        return $this->name;
      }
      
      /**
       * (no documentation provided)
       */
      public function setName($name) {
        $this->name = $name;
      }
      /**
       * (no documentation provided)
       */
      public function getEpisodal() {
        return $this->episodal;
      }
      
      /**
       * (no documentation provided)
       */
      public function setEpisodal($episodal) {
        $this->episodal = $episodal;
      }
      /**
       * (no documentation provided)
       */
      public function getDiagnostic() {
        return $this->diagnostic;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDiagnostic($diagnostic) {
        $this->diagnostic = $diagnostic;
      }
      /**
       * (no documentation provided)
       */
      public function getEpisodeType() {
        return $this->episodeType;
      }
      
      /**
       * (no documentation provided)
       */
      public function setEpisodeType($episodeType) {
        $this->episodeType = $episodeType;
      }
      /**
       * (no documentation provided)
       */
      public function getRgbColor() {
        return $this->rgbColor;
      }
      
      /**
       * (no documentation provided)
       */
      public function setRgbColor($rgbColor) {
        $this->rgbColor = $rgbColor;
      }
      /**
       * (no documentation provided)
       */
      public function getDocCount() {
        return $this->docCount;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDocCount($docCount) {
        $this->docCount = $docCount;
      }
      /**
       * (no documentation provided)
       */
      public function getEpisodeCount() {
        return $this->episodeCount;
      }
      
      /**
       * (no documentation provided)
       */
      public function setEpisodeCount($episodeCount) {
        $this->episodeCount = $episodeCount;
      }
      /**
       * (no documentation provided)
       */
      public function getLastModifiedTimestamp() {
        return $this->lastModifiedTimestamp;
      }
      
      /**
       * (no documentation provided)
       */
      public function setLastModifiedTimestamp($lastModifiedTimestamp) {
        $this->lastModifiedTimestamp = $lastModifiedTimestamp;
      }
      /**
       * Returns the associative array for this SectionDTO
       */
      public function toArray() {
        $a = array();
        if( $this->src ) {
          $a["src"] = $this->src;
        }
        if( $this->id ) {
          $a["id"] = $this->id;
        }
        if( $this->name ) {
          $a["name"] = $this->name;
        }
        if( $this->episodal ) {
          $a["episodal"] = $this->episodal;
        }
        if( $this->diagnostic ) {
          $a["diagnostic"] = $this->diagnostic;
        }
        if( $this->episodeType ) {
          $a["EpisodeType"] = $this->episodeType;
        }
        if( $this->rgbColor ) {
          $a["rgbColor"] = $this->rgbColor;
        }
        if( $this->docCount ) {
          $a["DocCount"] = $this->docCount;
        }
        if( $this->episodeCount ) {
          $a["EpisodeCount"] = $this->episodeCount;
        }
        if( $this->lastModifiedTimestamp ) {
          $a["lastModifiedTimestamp"] = $this->lastModifiedTimestamp;
        }
        return $a;
      }
      
      /**
       * Returns the JSON string for this SectionDTO
       */
      public function toJson() {
        return json_encode($this->toArray());
      }

      /**
       * Initializes this SectionDTO from an associative array
       */
      public function initFromArray($o) {
        if( isset($o['src']) ) {
          $this->src = $o["src"];
        }
        if( isset($o['id']) ) {
          $this->id = $o["id"];
        }
        if( isset($o['name']) ) {
          $this->name = $o["name"];
        }
        if( isset($o['episodal']) ) {
          $this->episodal = $o["episodal"];
        }
        if( isset($o['diagnostic']) ) {
          $this->diagnostic = $o["diagnostic"];
        }
        if( isset($o['EpisodeType']) ) {
          $this->episodeType = $o["EpisodeType"];
        }
        if( isset($o['rgbColor']) ) {
          $this->rgbColor = $o["rgbColor"];
        }
        if( isset($o['DocCount']) ) {
          $this->docCount = $o["DocCount"];
        }
        if( isset($o['EpisodeCount']) ) {
          $this->episodeCount = $o["EpisodeCount"];
        }
        if( isset($o['lastModifiedTimestamp']) ) {
          $this->lastModifiedTimestamp = $o["lastModifiedTimestamp"];
        }
      }
    
    }
    
  }


  namespace Au\Com\Infomedix\Udr\Rest\Common\Dto {

    /**
     * 
     */
    class ResultDataDTO  {
    
    
      /**
       * (no documentation provided)
       */
      private $report;
      /**
       * (no documentation provided)
       */
      private $atomic;
      /**
       * (no documentation provided)
       */
      private $order;
      /**
       * (no documentation provided)
       */
      private $request;
      /**
       * (no documentation provided)
       */
      private $copiesTo;
      /**
       * (no documentation provided)
       */
      private $image;

      /**
       * Constructs a ResultDataDTO from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * (no documentation provided)
       */
      public function getReport() {
        return $this->report;
      }
      
      /**
       * (no documentation provided)
       */
      public function setReport($report) {
        $this->report = $report;
      }
      /**
       * (no documentation provided)
       */
      public function getAtomic() {
        return $this->atomic;
      }
      
      /**
       * (no documentation provided)
       */
      public function setAtomic($atomic) {
        $this->atomic = $atomic;
      }
      /**
       * (no documentation provided)
       */
      public function getOrder() {
        return $this->order;
      }
      
      /**
       * (no documentation provided)
       */
      public function setOrder($order) {
        $this->order = $order;
      }
      /**
       * (no documentation provided)
       */
      public function getRequest() {
        return $this->request;
      }
      
      /**
       * (no documentation provided)
       */
      public function setRequest($request) {
        $this->request = $request;
      }
      /**
       * (no documentation provided)
       */
      public function getCopiesTo() {
        return $this->copiesTo;
      }
      
      /**
       * (no documentation provided)
       */
      public function setCopiesTo($copiesTo) {
        $this->copiesTo = $copiesTo;
      }
      /**
       * (no documentation provided)
       */
      public function getImage() {
        return $this->image;
      }
      
      /**
       * (no documentation provided)
       */
      public function setImage($image) {
        $this->image = $image;
      }
      /**
       * Returns the associative array for this ResultDataDTO
       */
      public function toArray() {
        $a = array();
        if( $this->report ) {
          $ab = array();
          foreach( $this->report as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['report'] = $ab;
        }
        if( $this->atomic ) {
          $ab = array();
          foreach( $this->atomic as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['atomic'] = $ab;
        }
        if( $this->order ) {
          $a["order"] = $this->order->toArray();
        }
        if( $this->request ) {
          $a["request"] = $this->request->toArray();
        }
        if( $this->copiesTo ) {
          $a["copies"] = $this->copiesTo->toArray();
        }
        if( $this->image ) {
          $a["image"] = $this->image->toArray();
        }
        return $a;
      }
      
      /**
       * Returns the JSON string for this ResultDataDTO
       */
      public function toJson() {
        return json_encode($this->toArray());
      }

      /**
       * Initializes this ResultDataDTO from an associative array
       */
      public function initFromArray($o) {
        $this->report = array();
        if( isset($o['report']) ) {
          foreach( $o['report'] as $i => $x ) {
            $this->report[$i] = new \Au\Com\Infomedix\Udr\Rest\Common\Dto\ReportDTO($x);
          }
        }
        $this->atomic = array();
        if( isset($o['atomic']) ) {
          foreach( $o['atomic'] as $i => $x ) {
            $this->atomic[$i] = new \Au\Com\Infomedix\Udr\Rest\Common\Dto\AtomicDTO($x);
          }
        }
        if( isset($o['order']) ) {
          $this->order = new \Au\Com\Infomedix\Udr\Rest\Common\Dto\OrderDTO($o["order"]);
        }
        if( isset($o['request']) ) {
          $this->request = new \Au\Com\Infomedix\Udr\Rest\Common\Dto\RequestDTO($o["request"]);
        }
        if( isset($o['copies']) ) {
          $this->copiesTo = new \Au\Com\Infomedix\Udr\Rest\Common\Dto\CopiesToDTO($o["copies"]);
        }
        if( isset($o['image']) ) {
          $this->image = new \Au\Com\Infomedix\Udr\Rest\Common\Dto\ImageDTO($o["image"]);
        }
      }
    
    }
    
  }


  namespace Au\Com\Infomedix\Udr\Rest\Common\Dto {

    /**
     * 
     */
    class ReportDTO  {
    
    
      /**
       * (no documentation provided)
       */
      private $text;

      /**
       * Constructs a ReportDTO from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * (no documentation provided)
       */
      public function getText() {
        return $this->text;
      }
      
      /**
       * (no documentation provided)
       */
      public function setText($text) {
        $this->text = $text;
      }
      /**
       * Returns the associative array for this ReportDTO
       */
      public function toArray() {
        $a = array();
        if( $this->text ) {
          $a["text"] = $this->text;
        }
        return $a;
      }
      
      /**
       * Returns the JSON string for this ReportDTO
       */
      public function toJson() {
        return json_encode($this->toArray());
      }

      /**
       * Initializes this ReportDTO from an associative array
       */
      public function initFromArray($o) {
        if( isset($o['text']) ) {
          $this->text = $o["text"];
        }
      }
    
    }
    
  }


  namespace Au\Com\Infomedix\Udr\Rest\Common\Dto {

    /**
     * 
     */
    class PatientComponentDTO  {
    
    
      /**
       * (no documentation provided)
       */
      private $patientIdNs;
      /**
       * (no documentation provided)
       */
      private $patientSrc;
      /**
       * (no documentation provided)
       */
      private $up;

      /**
       * Constructs a PatientComponentDTO from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * (no documentation provided)
       */
      public function getPatientIdNs() {
        return $this->patientIdNs;
      }
      
      /**
       * (no documentation provided)
       */
      public function setPatientIdNs($patientIdNs) {
        $this->patientIdNs = $patientIdNs;
      }
      /**
       * (no documentation provided)
       */
      public function getPatientSrc() {
        return $this->patientSrc;
      }
      
      /**
       * (no documentation provided)
       */
      public function setPatientSrc($patientSrc) {
        $this->patientSrc = $patientSrc;
      }
      /**
       * (no documentation provided)
       */
      public function getUp() {
        return $this->up;
      }
      
      /**
       * (no documentation provided)
       */
      public function setUp($up) {
        $this->up = $up;
      }
      /**
       * Returns the associative array for this PatientComponentDTO
       */
      public function toArray() {
        $a = array();
        if( $this->patientIdNs ) {
          $a["patientIdNs"] = $this->patientIdNs;
        }
        if( $this->patientSrc ) {
          $a["patientSrc"] = $this->patientSrc;
        }
        if( $this->up ) {
          $a["up"] = $this->up;
        }
        return $a;
      }
      
      /**
       * Returns the JSON string for this PatientComponentDTO
       */
      public function toJson() {
        return json_encode($this->toArray());
      }

      /**
       * Initializes this PatientComponentDTO from an associative array
       */
      public function initFromArray($o) {
        if( isset($o['patientIdNs']) ) {
          $this->patientIdNs = $o["patientIdNs"];
        }
        if( isset($o['patientSrc']) ) {
          $this->patientSrc = $o["patientSrc"];
        }
        if( isset($o['up']) ) {
          $this->up = $o["up"];
        }
      }
    
    }
    
  }


  namespace Au\Com\Infomedix\Udr\Rest\Common\Dto {

    /**
     * 
     */
    class ImageDTO  {
    
    
      /**
       * (no documentation provided)
       */
      private $data;
      /**
       * (no documentation provided)
       */
      private $ext;

      /**
       * Constructs a ImageDTO from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * (no documentation provided)
       */
      public function getData() {
        return $this->data;
      }
      
      /**
       * (no documentation provided)
       */
      public function setData($data) {
        $this->data = $data;
      }
      /**
       * (no documentation provided)
       */
      public function getExt() {
        return $this->ext;
      }
      
      /**
       * (no documentation provided)
       */
      public function setExt($ext) {
        $this->ext = $ext;
      }
      /**
       * Returns the associative array for this ImageDTO
       */
      public function toArray() {
        $a = array();
        if( $this->data ) {
          $a["data"] = $this->data;
        }
        if( $this->ext ) {
          $a["ext"] = $this->ext;
        }
        return $a;
      }
      
      /**
       * Returns the JSON string for this ImageDTO
       */
      public function toJson() {
        return json_encode($this->toArray());
      }

      /**
       * Initializes this ImageDTO from an associative array
       */
      public function initFromArray($o) {
        if( isset($o['data']) ) {
          $this->data = $o["data"];
        }
        if( isset($o['ext']) ) {
          $this->ext = $o["ext"];
        }
      }
    
    }
    
  }


  namespace Au\Com\Infomedix\Udr\Rest\Common\Dto {

    /**
     * 
     */
    class CopiesToDTO  {
    
    
      /**
       * (no documentation provided)
       */
      private $doctor;

      /**
       * Constructs a CopiesToDTO from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * (no documentation provided)
       */
      public function getDoctor() {
        return $this->doctor;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDoctor($doctor) {
        $this->doctor = $doctor;
      }
      /**
       * Returns the associative array for this CopiesToDTO
       */
      public function toArray() {
        $a = array();
        if( $this->doctor ) {
          $ab = array();
          foreach( $this->doctor as $i => $x ) {
            $ab[$i] = $x;
          }
          $a['doctor'] = $ab;
        }
        return $a;
      }
      
      /**
       * Returns the JSON string for this CopiesToDTO
       */
      public function toJson() {
        return json_encode($this->toArray());
      }

      /**
       * Initializes this CopiesToDTO from an associative array
       */
      public function initFromArray($o) {
        $this->doctor = array();
        if( isset($o['doctor']) ) {
          foreach( $o['doctor'] as $i => $x ) {
            $this->doctor[$i] = $x;
          }
        }
      }
    
    }
    
  }


  namespace Au\Com\Infomedix\Cpfmodel\Txn {

    /**
     * 
     */
    class ItemIdent  {
    
    
      /**
       * (no documentation provided)
       */
      private $id;
      /**
       * (no documentation provided)
       */
      private $text;

      /**
       * Constructs a ItemIdent from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * (no documentation provided)
       */
      public function getId() {
        return $this->id;
      }
      
      /**
       * (no documentation provided)
       */
      public function setId($id) {
        $this->id = $id;
      }
      /**
       * (no documentation provided)
       */
      public function getText() {
        return $this->text;
      }
      
      /**
       * (no documentation provided)
       */
      public function setText($text) {
        $this->text = $text;
      }
      /**
       * Returns the associative array for this ItemIdent
       */
      public function toArray() {
        $a = array();
        if( $this->id ) {
          $a["id"] = $this->id;
        }
        if( $this->text ) {
          $a["text"] = $this->text;
        }
        return $a;
      }
      
      /**
       * Returns the JSON string for this ItemIdent
       */
      public function toJson() {
        return json_encode($this->toArray());
      }

      /**
       * Initializes this ItemIdent from an associative array
       */
      public function initFromArray($o) {
        if( isset($o['id']) ) {
          $this->id = $o["id"];
        }
        if( isset($o['text']) ) {
          $this->text = $o["text"];
        }
      }
    
    }
    
  }


  namespace Au\Com\Infomedix\Udr\Rest\Common\Dto {

    /**
     * 
     */
    class UnitListItemDTO extends \Au\Com\Infomedix\Udr\Rest\Common\Dto\PatientComponentDTO  {
    
    
      /**
       * (no documentation provided)
       */
      private $domain;
      /**
       * (no documentation provided)
       */
      private $campus;
      /**
       * (no documentation provided)
       */
      private $code;
      /**
       * (no documentation provided)
       */
      private $listId;
      /**
       * (no documentation provided)
       */
      private $description;

      /**
       * Constructs a UnitListItemDTO from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * (no documentation provided)
       */
      public function getDomain() {
        return $this->domain;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDomain($domain) {
        $this->domain = $domain;
      }
      /**
       * (no documentation provided)
       */
      public function getCampus() {
        return $this->campus;
      }
      
      /**
       * (no documentation provided)
       */
      public function setCampus($campus) {
        $this->campus = $campus;
      }
      /**
       * (no documentation provided)
       */
      public function getCode() {
        return $this->code;
      }
      
      /**
       * (no documentation provided)
       */
      public function setCode($code) {
        $this->code = $code;
      }
      /**
       * (no documentation provided)
       */
      public function getListId() {
        return $this->listId;
      }
      
      /**
       * (no documentation provided)
       */
      public function setListId($listId) {
        $this->listId = $listId;
      }
      /**
       * (no documentation provided)
       */
      public function getDescription() {
        return $this->description;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDescription($description) {
        $this->description = $description;
      }
      /**
       * Returns the associative array for this UnitListItemDTO
       */
      public function toArray() {
        $a = parent::toArray();
        if( $this->domain ) {
          $a["Domain"] = $this->domain;
        }
        if( $this->campus ) {
          $a["Campus"] = $this->campus;
        }
        if( $this->code ) {
          $a["Code"] = $this->code;
        }
        if( $this->listId ) {
          $a["ListId"] = $this->listId;
        }
        if( $this->description ) {
          $a["Description"] = $this->description;
        }
        return $a;
      }
      

      /**
       * Initializes this UnitListItemDTO from an associative array
       */
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['Domain']) ) {
          $this->domain = $o["Domain"];
        }
        if( isset($o['Campus']) ) {
          $this->campus = $o["Campus"];
        }
        if( isset($o['Code']) ) {
          $this->code = $o["Code"];
        }
        if( isset($o['ListId']) ) {
          $this->listId = $o["ListId"];
        }
        if( isset($o['Description']) ) {
          $this->description = $o["Description"];
        }
      }
    
    }
    
  }


  namespace Au\Com\Infomedix\Udr\Rest\Common\Dto {

    /**
     * 
     */
    class WardListItemDTO extends \Au\Com\Infomedix\Udr\Rest\Common\Dto\PatientComponentDTO  {
    
    
      /**
       * (no documentation provided)
       */
      private $domain;
      /**
       * (no documentation provided)
       */
      private $campus;
      /**
       * (no documentation provided)
       */
      private $code;
      /**
       * (no documentation provided)
       */
      private $listId;
      /**
       * (no documentation provided)
       */
      private $description;

      /**
       * Constructs a WardListItemDTO from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * (no documentation provided)
       */
      public function getDomain() {
        return $this->domain;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDomain($domain) {
        $this->domain = $domain;
      }
      /**
       * (no documentation provided)
       */
      public function getCampus() {
        return $this->campus;
      }
      
      /**
       * (no documentation provided)
       */
      public function setCampus($campus) {
        $this->campus = $campus;
      }
      /**
       * (no documentation provided)
       */
      public function getCode() {
        return $this->code;
      }
      
      /**
       * (no documentation provided)
       */
      public function setCode($code) {
        $this->code = $code;
      }
      /**
       * (no documentation provided)
       */
      public function getListId() {
        return $this->listId;
      }
      
      /**
       * (no documentation provided)
       */
      public function setListId($listId) {
        $this->listId = $listId;
      }
      /**
       * (no documentation provided)
       */
      public function getDescription() {
        return $this->description;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDescription($description) {
        $this->description = $description;
      }
      /**
       * Returns the associative array for this WardListItemDTO
       */
      public function toArray() {
        $a = parent::toArray();
        if( $this->domain ) {
          $a["Domain"] = $this->domain;
        }
        if( $this->campus ) {
          $a["Campus"] = $this->campus;
        }
        if( $this->code ) {
          $a["Code"] = $this->code;
        }
        if( $this->listId ) {
          $a["ListId"] = $this->listId;
        }
        if( $this->description ) {
          $a["Description"] = $this->description;
        }
        return $a;
      }
      

      /**
       * Initializes this WardListItemDTO from an associative array
       */
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['Domain']) ) {
          $this->domain = $o["Domain"];
        }
        if( isset($o['Campus']) ) {
          $this->campus = $o["Campus"];
        }
        if( isset($o['Code']) ) {
          $this->code = $o["Code"];
        }
        if( isset($o['ListId']) ) {
          $this->listId = $o["ListId"];
        }
        if( isset($o['Description']) ) {
          $this->description = $o["Description"];
        }
      }
    
    }
    
  }


  namespace Au\Com\Infomedix\Udr\Rest\Common\Dto {

    /**
     * 
     */
    class PatientListItemDTO extends \Au\Com\Infomedix\Udr\Rest\Common\Dto\PatientComponentDTO  {
    
    
      /**
       * (no documentation provided)
       */
      private $listId;
      /**
       * (no documentation provided)
       */
      private $description;
      /**
       * (no documentation provided)
       */
      private $isEpisodic;

      /**
       * Constructs a PatientListItemDTO from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * (no documentation provided)
       */
      public function getListId() {
        return $this->listId;
      }
      
      /**
       * (no documentation provided)
       */
      public function setListId($listId) {
        $this->listId = $listId;
      }
      /**
       * (no documentation provided)
       */
      public function getDescription() {
        return $this->description;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDescription($description) {
        $this->description = $description;
      }
      /**
       * (no documentation provided)
       */
      public function getIsEpisodic() {
        return $this->isEpisodic;
      }
      
      /**
       * (no documentation provided)
       */
      public function setIsEpisodic($isEpisodic) {
        $this->isEpisodic = $isEpisodic;
      }
      /**
       * Returns the associative array for this PatientListItemDTO
       */
      public function toArray() {
        $a = parent::toArray();
        if( $this->listId ) {
          $a["ListId"] = $this->listId;
        }
        if( $this->description ) {
          $a["Description"] = $this->description;
        }
        if( $this->isEpisodic ) {
          $a["IsEpisodic"] = $this->isEpisodic;
        }
        return $a;
      }
      

      /**
       * Initializes this PatientListItemDTO from an associative array
       */
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['ListId']) ) {
          $this->listId = $o["ListId"];
        }
        if( isset($o['Description']) ) {
          $this->description = $o["Description"];
        }
        if( isset($o['IsEpisodic']) ) {
          $this->isEpisodic = $o["IsEpisodic"];
        }
      }
    
    }
    
  }


  namespace Au\Com\Infomedix\Udr\Rest\Common\Dto {

    /**
     * 
     */
    class PaginatedListDTO extends \Au\Com\Infomedix\Udr\Rest\Common\Dto\ListDTO  {
    
    
      /**
       * (no documentation provided)
       */
      private $start;
      /**
       * (no documentation provided)
       */
      private $size;
      /**
       * (no documentation provided)
       */
      private $sort;
      /**
       * (no documentation provided)
       */
      private $order;

      /**
       * Constructs a PaginatedListDTO from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * (no documentation provided)
       */
      public function getStart() {
        return $this->start;
      }
      
      /**
       * (no documentation provided)
       */
      public function setStart($start) {
        $this->start = $start;
      }
      /**
       * (no documentation provided)
       */
      public function getSize() {
        return $this->size;
      }
      
      /**
       * (no documentation provided)
       */
      public function setSize($size) {
        $this->size = $size;
      }
      /**
       * (no documentation provided)
       */
      public function getSort() {
        return $this->sort;
      }
      
      /**
       * (no documentation provided)
       */
      public function setSort($sort) {
        $this->sort = $sort;
      }
      /**
       * (no documentation provided)
       */
      public function getOrder() {
        return $this->order;
      }
      
      /**
       * (no documentation provided)
       */
      public function setOrder($order) {
        $this->order = $order;
      }
      /**
       * Returns the associative array for this PaginatedListDTO
       */
      public function toArray() {
        $a = parent::toArray();
        if( $this->start ) {
          $a["start"] = $this->start;
        }
        if( $this->size ) {
          $a["size"] = $this->size;
        }
        if( $this->sort ) {
          $a["sort"] = $this->sort;
        }
        if( $this->order ) {
          $a["order"] = $this->order;
        }
        return $a;
      }
      

      /**
       * Initializes this PaginatedListDTO from an associative array
       */
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['start']) ) {
          $this->start = $o["start"];
        }
        if( isset($o['size']) ) {
          $this->size = $o["size"];
        }
        if( isset($o['sort']) ) {
          $this->sort = $o["sort"];
        }
        if( isset($o['order']) ) {
          $this->order = $o["order"];
        }
      }
    
    }
    
  }


  namespace Au\Com\Infomedix\Udr\Rest\Common\Dto {

    /**
     * 
     */
    class DocumentDTO extends \Au\Com\Infomedix\Udr\Rest\Common\Dto\PatientComponentDTO  {
    
      /**
       * (no documentation provided)
       */
      private $src;
    
      /**
       * (no documentation provided)
       */
      private $masterID;
      /**
       * (no documentation provided)
       */
      private $documentCode;
      /**
       * (no documentation provided)
       */
      private $documentDesc;
      /**
       * (no documentation provided)
       */
      private $section;
      /**
       * (no documentation provided)
       */
      private $episode;
      /**
       * (no documentation provided)
       */
      private $mimeType;
      /**
       * (no documentation provided)
       */
      private $documentDate;
      /**
       * (no documentation provided)
       */
      private $pageNumber;
      /**
       * (no documentation provided)
       */
      private $state;
      /**
       * (no documentation provided)
       */
      private $urno;
      /**
       * (no documentation provided)
       */
      private $patientNs;
      /**
       * (no documentation provided)
       */
      private $documentSource;
      /**
       * (no documentation provided)
       */
      private $documentTime;
      /**
       * (no documentation provided)
       */
      private $scannedDate;
      /**
       * (no documentation provided)
       */
      private $documentType;
      /**
       * (no documentation provided)
       */
      private $url;
      /**
       * (no documentation provided)
       */
      private $docTypeSpecific;

      /**
       * Constructs a DocumentDTO from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * (no documentation provided)
       */
      public function getSrc() {
        return $this->src;
      }
      
      /**
       * (no documentation provided)
       */
      public function setSrc($src) {
        $this->src = $src;
      }
      /**
       * (no documentation provided)
       */
      public function getMasterID() {
        return $this->masterID;
      }
      
      /**
       * (no documentation provided)
       */
      public function setMasterID($masterID) {
        $this->masterID = $masterID;
      }
      /**
       * (no documentation provided)
       */
      public function getDocumentCode() {
        return $this->documentCode;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDocumentCode($documentCode) {
        $this->documentCode = $documentCode;
      }
      /**
       * (no documentation provided)
       */
      public function getDocumentDesc() {
        return $this->documentDesc;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDocumentDesc($documentDesc) {
        $this->documentDesc = $documentDesc;
      }
      /**
       * (no documentation provided)
       */
      public function getSection() {
        return $this->section;
      }
      
      /**
       * (no documentation provided)
       */
      public function setSection($section) {
        $this->section = $section;
      }
      /**
       * (no documentation provided)
       */
      public function getEpisode() {
        return $this->episode;
      }
      
      /**
       * (no documentation provided)
       */
      public function setEpisode($episode) {
        $this->episode = $episode;
      }
      /**
       * (no documentation provided)
       */
      public function getMimeType() {
        return $this->mimeType;
      }
      
      /**
       * (no documentation provided)
       */
      public function setMimeType($mimeType) {
        $this->mimeType = $mimeType;
      }
      /**
       * (no documentation provided)
       */
      public function getDocumentDate() {
        return $this->documentDate;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDocumentDate($documentDate) {
        $this->documentDate = $documentDate;
      }
      /**
       * (no documentation provided)
       */
      public function getPageNumber() {
        return $this->pageNumber;
      }
      
      /**
       * (no documentation provided)
       */
      public function setPageNumber($pageNumber) {
        $this->pageNumber = $pageNumber;
      }
      /**
       * (no documentation provided)
       */
      public function getState() {
        return $this->state;
      }
      
      /**
       * (no documentation provided)
       */
      public function setState($state) {
        $this->state = $state;
      }
      /**
       * (no documentation provided)
       */
      public function getUrno() {
        return $this->urno;
      }
      
      /**
       * (no documentation provided)
       */
      public function setUrno($urno) {
        $this->urno = $urno;
      }
      /**
       * (no documentation provided)
       */
      public function getPatientNs() {
        return $this->patientNs;
      }
      
      /**
       * (no documentation provided)
       */
      public function setPatientNs($patientNs) {
        $this->patientNs = $patientNs;
      }
      /**
       * (no documentation provided)
       */
      public function getDocumentSource() {
        return $this->documentSource;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDocumentSource($documentSource) {
        $this->documentSource = $documentSource;
      }
      /**
       * (no documentation provided)
       */
      public function getDocumentTime() {
        return $this->documentTime;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDocumentTime($documentTime) {
        $this->documentTime = $documentTime;
      }
      /**
       * (no documentation provided)
       */
      public function getScannedDate() {
        return $this->scannedDate;
      }
      
      /**
       * (no documentation provided)
       */
      public function setScannedDate($scannedDate) {
        $this->scannedDate = $scannedDate;
      }
      /**
       * (no documentation provided)
       */
      public function getDocumentType() {
        return $this->documentType;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDocumentType($documentType) {
        $this->documentType = $documentType;
      }
      /**
       * (no documentation provided)
       */
      public function getUrl() {
        return $this->url;
      }
      
      /**
       * (no documentation provided)
       */
      public function setUrl($url) {
        $this->url = $url;
      }
      /**
       * (no documentation provided)
       */
      public function getDocTypeSpecific() {
        return $this->docTypeSpecific;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDocTypeSpecific($docTypeSpecific) {
        $this->docTypeSpecific = $docTypeSpecific;
      }
      /**
       * Returns the associative array for this DocumentDTO
       */
      public function toArray() {
        $a = parent::toArray();
        if( $this->src ) {
          $a["src"] = $this->src;
        }
        if( $this->masterID ) {
          $a["MasterID"] = $this->masterID;
        }
        if( $this->documentCode ) {
          $a["DocumentCode"] = $this->documentCode;
        }
        if( $this->documentDesc ) {
          $a["DocumentDesc"] = $this->documentDesc;
        }
        if( $this->section ) {
          $a["Section"] = $this->section;
        }
        if( $this->episode ) {
          $a["Episode"] = $this->episode;
        }
        if( $this->mimeType ) {
          $a["MimeType"] = $this->mimeType;
        }
        if( $this->documentDate ) {
          $a["DocumentDate"] = $this->documentDate;
        }
        if( $this->pageNumber ) {
          $a["PageNumber"] = $this->pageNumber;
        }
        if( $this->state ) {
          $a["State"] = $this->state;
        }
        if( $this->urno ) {
          $a["Urno"] = $this->urno;
        }
        if( $this->patientNs ) {
          $a["PatientNs"] = $this->patientNs;
        }
        if( $this->documentSource ) {
          $a["DocumentSource"] = $this->documentSource;
        }
        if( $this->documentTime ) {
          $a["DocumentTime"] = $this->documentTime;
        }
        if( $this->scannedDate ) {
          $a["ScannedDate"] = $this->scannedDate;
        }
        if( $this->documentType ) {
          $a["DocumentType"] = $this->documentType;
        }
        if( $this->url ) {
          $a["url"] = $this->url;
        }
        if( $this->docTypeSpecific ) {
          $a["DocTypeSpecific"] = $this->docTypeSpecific->toArray();
        }
        return $a;
      }
      

      /**
       * Initializes this DocumentDTO from an associative array
       */
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['src']) ) {
          $this->src = $o["src"];
        }
        if( isset($o['MasterID']) ) {
          $this->masterID = $o["MasterID"];
        }
        if( isset($o['DocumentCode']) ) {
          $this->documentCode = $o["DocumentCode"];
        }
        if( isset($o['DocumentDesc']) ) {
          $this->documentDesc = $o["DocumentDesc"];
        }
        if( isset($o['Section']) ) {
          $this->section = $o["Section"];
        }
        if( isset($o['Episode']) ) {
          $this->episode = $o["Episode"];
        }
        if( isset($o['MimeType']) ) {
          $this->mimeType = $o["MimeType"];
        }
        if( isset($o['DocumentDate']) ) {
          $this->documentDate = $o["DocumentDate"];
        }
        if( isset($o['PageNumber']) ) {
          $this->pageNumber = $o["PageNumber"];
        }
        if( isset($o['State']) ) {
          $this->state = $o["State"];
        }
        if( isset($o['Urno']) ) {
          $this->urno = $o["Urno"];
        }
        if( isset($o['PatientNs']) ) {
          $this->patientNs = $o["PatientNs"];
        }
        if( isset($o['DocumentSource']) ) {
          $this->documentSource = $o["DocumentSource"];
        }
        if( isset($o['DocumentTime']) ) {
          $this->documentTime = $o["DocumentTime"];
        }
        if( isset($o['ScannedDate']) ) {
          $this->scannedDate = $o["ScannedDate"];
        }
        if( isset($o['DocumentType']) ) {
          $this->documentType = $o["DocumentType"];
        }
        if( isset($o['url']) ) {
          $this->url = $o["url"];
        }
        if( isset($o['DocTypeSpecific']) ) {
          $this->docTypeSpecific = new \Au\Com\Infomedix\Udr\Rest\Common\Dto\DocTypeSpecificDTO($o["DocTypeSpecific"]);
        }
      }
    
    }
    
  }


  namespace Au\Com\Infomedix\Udr\Rest\Common\Dto {

    /**
     * 
     */
    class EpisodeDTO extends \Au\Com\Infomedix\Udr\Rest\Common\Dto\PatientComponentDTO  {
    
      /**
       * (no documentation provided)
       */
      private $patientSrc;
      /**
       * (no documentation provided)
       */
      private $patientIdNs;
      /**
       * (no documentation provided)
       */
      private $up;
      /**
       * (no documentation provided)
       */
      private $src;
    
      /**
       * (no documentation provided)
       */
      private $intId;
      /**
       * (no documentation provided)
       */
      private $extId;
      /**
       * (no documentation provided)
       */
      private $extNS;
      /**
       * (no documentation provided)
       */
      private $patientURNO;
      /**
       * (no documentation provided)
       */
      private $ward_code;
      /**
       * (no documentation provided)
       */
      private $service_type;
      /**
       * (no documentation provided)
       */
      private $care_type;
      /**
       * (no documentation provided)
       */
      private $episodeId;
      /**
       * (no documentation provided)
       */
      private $episodeNs;
      /**
       * (no documentation provided)
       */
      private $type;
      /**
       * (no documentation provided)
       */
      private $state;
      /**
       * (no documentation provided)
       */
      private $start;
      /**
       * (no documentation provided)
       */
      private $end;
      /**
       * (no documentation provided)
       */
      private $campus;
      /**
       * (no documentation provided)
       */
      private $wardCode;
      /**
       * (no documentation provided)
       */
      private $wardDescription;
      /**
       * (no documentation provided)
       */
      private $unitCode;
      /**
       * (no documentation provided)
       */
      private $unitDescription;
      /**
       * (no documentation provided)
       */
      private $bedCode;
      /**
       * (no documentation provided)
       */
      private $bedDescription;
      /**
       * (no documentation provided)
       */
      private $serviceType;
      /**
       * (no documentation provided)
       */
      private $careType;
      /**
       * (no documentation provided)
       */
      private $doctorId;
      /**
       * (no documentation provided)
       */
      private $doctorFamily;
      /**
       * (no documentation provided)
       */
      private $doctorGiven;
      /**
       * (no documentation provided)
       */
      private $drg;
      /**
       * (no documentation provided)
       */
      private $los;
      /**
       * (no documentation provided)
       */
      private $noOfDocuments;
      /**
       * (no documentation provided)
       */
      private $startDate;
      /**
       * (no documentation provided)
       */
      private $endDate;
      /**
       * (no documentation provided)
       */
      private $financialClass;

      /**
       * Constructs a EpisodeDTO from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * (no documentation provided)
       */
      public function getPatientSrc() {
        return $this->patientSrc;
      }
      
      /**
       * (no documentation provided)
       */
      public function setPatientSrc($patientSrc) {
        $this->patientSrc = $patientSrc;
      }
      /**
       * (no documentation provided)
       */
      public function getPatientIdNs() {
        return $this->patientIdNs;
      }
      
      /**
       * (no documentation provided)
       */
      public function setPatientIdNs($patientIdNs) {
        $this->patientIdNs = $patientIdNs;
      }
      /**
       * (no documentation provided)
       */
      public function getUp() {
        return $this->up;
      }
      
      /**
       * (no documentation provided)
       */
      public function setUp($up) {
        $this->up = $up;
      }
      /**
       * (no documentation provided)
       */
      public function getSrc() {
        return $this->src;
      }
      
      /**
       * (no documentation provided)
       */
      public function setSrc($src) {
        $this->src = $src;
      }
      /**
       * (no documentation provided)
       */
      public function getIntId() {
        return $this->intId;
      }
      
      /**
       * (no documentation provided)
       */
      public function setIntId($intId) {
        $this->intId = $intId;
      }
      /**
       * (no documentation provided)
       */
      public function getExtId() {
        return $this->extId;
      }
      
      /**
       * (no documentation provided)
       */
      public function setExtId($extId) {
        $this->extId = $extId;
      }
      /**
       * (no documentation provided)
       */
      public function getExtNS() {
        return $this->extNS;
      }
      
      /**
       * (no documentation provided)
       */
      public function setExtNS($extNS) {
        $this->extNS = $extNS;
      }
      /**
       * (no documentation provided)
       */
      public function getPatientURNO() {
        return $this->patientURNO;
      }
      
      /**
       * (no documentation provided)
       */
      public function setPatientURNO($patientURNO) {
        $this->patientURNO = $patientURNO;
      }
      /**
       * (no documentation provided)
       */
      public function getWard_code() {
        return $this->ward_code;
      }
      
      /**
       * (no documentation provided)
       */
      public function setWard_code($ward_code) {
        $this->ward_code = $ward_code;
      }
      /**
       * (no documentation provided)
       */
      public function getService_type() {
        return $this->service_type;
      }
      
      /**
       * (no documentation provided)
       */
      public function setService_type($service_type) {
        $this->service_type = $service_type;
      }
      /**
       * (no documentation provided)
       */
      public function getCare_type() {
        return $this->care_type;
      }
      
      /**
       * (no documentation provided)
       */
      public function setCare_type($care_type) {
        $this->care_type = $care_type;
      }
      /**
       * (no documentation provided)
       */
      public function getEpisodeId() {
        return $this->episodeId;
      }
      
      /**
       * (no documentation provided)
       */
      public function setEpisodeId($episodeId) {
        $this->episodeId = $episodeId;
      }
      /**
       * (no documentation provided)
       */
      public function getEpisodeNs() {
        return $this->episodeNs;
      }
      
      /**
       * (no documentation provided)
       */
      public function setEpisodeNs($episodeNs) {
        $this->episodeNs = $episodeNs;
      }
      /**
       * (no documentation provided)
       */
      public function getType() {
        return $this->type;
      }
      
      /**
       * (no documentation provided)
       */
      public function setType($type) {
        $this->type = $type;
      }
      /**
       * (no documentation provided)
       */
      public function getState() {
        return $this->state;
      }
      
      /**
       * (no documentation provided)
       */
      public function setState($state) {
        $this->state = $state;
      }
      /**
       * (no documentation provided)
       */
      public function getStart() {
        return $this->start;
      }
      
      /**
       * (no documentation provided)
       */
      public function setStart($start) {
        $this->start = $start;
      }
      /**
       * (no documentation provided)
       */
      public function getEnd() {
        return $this->end;
      }
      
      /**
       * (no documentation provided)
       */
      public function setEnd($end) {
        $this->end = $end;
      }
      /**
       * (no documentation provided)
       */
      public function getCampus() {
        return $this->campus;
      }
      
      /**
       * (no documentation provided)
       */
      public function setCampus($campus) {
        $this->campus = $campus;
      }
      /**
       * (no documentation provided)
       */
      public function getWardCode() {
        return $this->wardCode;
      }
      
      /**
       * (no documentation provided)
       */
      public function setWardCode($wardCode) {
        $this->wardCode = $wardCode;
      }
      /**
       * (no documentation provided)
       */
      public function getWardDescription() {
        return $this->wardDescription;
      }
      
      /**
       * (no documentation provided)
       */
      public function setWardDescription($wardDescription) {
        $this->wardDescription = $wardDescription;
      }
      /**
       * (no documentation provided)
       */
      public function getUnitCode() {
        return $this->unitCode;
      }
      
      /**
       * (no documentation provided)
       */
      public function setUnitCode($unitCode) {
        $this->unitCode = $unitCode;
      }
      /**
       * (no documentation provided)
       */
      public function getUnitDescription() {
        return $this->unitDescription;
      }
      
      /**
       * (no documentation provided)
       */
      public function setUnitDescription($unitDescription) {
        $this->unitDescription = $unitDescription;
      }
      /**
       * (no documentation provided)
       */
      public function getBedCode() {
        return $this->bedCode;
      }
      
      /**
       * (no documentation provided)
       */
      public function setBedCode($bedCode) {
        $this->bedCode = $bedCode;
      }
      /**
       * (no documentation provided)
       */
      public function getBedDescription() {
        return $this->bedDescription;
      }
      
      /**
       * (no documentation provided)
       */
      public function setBedDescription($bedDescription) {
        $this->bedDescription = $bedDescription;
      }
      /**
       * (no documentation provided)
       */
      public function getServiceType() {
        return $this->serviceType;
      }
      
      /**
       * (no documentation provided)
       */
      public function setServiceType($serviceType) {
        $this->serviceType = $serviceType;
      }
      /**
       * (no documentation provided)
       */
      public function getCareType() {
        return $this->careType;
      }
      
      /**
       * (no documentation provided)
       */
      public function setCareType($careType) {
        $this->careType = $careType;
      }
      /**
       * (no documentation provided)
       */
      public function getDoctorId() {
        return $this->doctorId;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDoctorId($doctorId) {
        $this->doctorId = $doctorId;
      }
      /**
       * (no documentation provided)
       */
      public function getDoctorFamily() {
        return $this->doctorFamily;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDoctorFamily($doctorFamily) {
        $this->doctorFamily = $doctorFamily;
      }
      /**
       * (no documentation provided)
       */
      public function getDoctorGiven() {
        return $this->doctorGiven;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDoctorGiven($doctorGiven) {
        $this->doctorGiven = $doctorGiven;
      }
      /**
       * (no documentation provided)
       */
      public function getDrg() {
        return $this->drg;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDrg($drg) {
        $this->drg = $drg;
      }
      /**
       * (no documentation provided)
       */
      public function getLos() {
        return $this->los;
      }
      
      /**
       * (no documentation provided)
       */
      public function setLos($los) {
        $this->los = $los;
      }
      /**
       * (no documentation provided)
       */
      public function getNoOfDocuments() {
        return $this->noOfDocuments;
      }
      
      /**
       * (no documentation provided)
       */
      public function setNoOfDocuments($noOfDocuments) {
        $this->noOfDocuments = $noOfDocuments;
      }
      /**
       * (no documentation provided)
       */
      public function getStartDate() {
        return $this->startDate;
      }
      
      /**
       * (no documentation provided)
       */
      public function setStartDate($startDate) {
        $this->startDate = $startDate;
      }
      /**
       * (no documentation provided)
       */
      public function getEndDate() {
        return $this->endDate;
      }
      
      /**
       * (no documentation provided)
       */
      public function setEndDate($endDate) {
        $this->endDate = $endDate;
      }
      /**
       * (no documentation provided)
       */
      public function getFinancialClass() {
        return $this->financialClass;
      }
      
      /**
       * (no documentation provided)
       */
      public function setFinancialClass($financialClass) {
        $this->financialClass = $financialClass;
      }
      /**
       * Returns the associative array for this EpisodeDTO
       */
      public function toArray() {
        $a = parent::toArray();
        if( $this->patientSrc ) {
          $a["PatientSrc"] = $this->patientSrc;
        }
        if( $this->patientIdNs ) {
          $a["PatientIdNs"] = $this->patientIdNs;
        }
        if( $this->up ) {
          $a["Up"] = $this->up;
        }
        if( $this->src ) {
          $a["src"] = $this->src;
        }
        if( $this->intId ) {
          $a["intId"] = $this->intId;
        }
        if( $this->extId ) {
          $a["extId"] = $this->extId;
        }
        if( $this->extNS ) {
          $a["extNS"] = $this->extNS;
        }
        if( $this->patientURNO ) {
          $a["patientURNO"] = $this->patientURNO;
        }
        if( $this->ward_code ) {
          $a["ward_code"] = $this->ward_code;
        }
        if( $this->service_type ) {
          $a["service_type"] = $this->service_type;
        }
        if( $this->care_type ) {
          $a["care_type"] = $this->care_type;
        }
        if( $this->episodeId ) {
          $a["EpisodeId"] = $this->episodeId;
        }
        if( $this->episodeNs ) {
          $a["EpisodeNs"] = $this->episodeNs;
        }
        if( $this->type ) {
          $a["Type"] = $this->type;
        }
        if( $this->state ) {
          $a["State"] = $this->state;
        }
        if( $this->start ) {
          $a["Start"] = $this->start;
        }
        if( $this->end ) {
          $a["End"] = $this->end;
        }
        if( $this->campus ) {
          $a["Campus"] = $this->campus;
        }
        if( $this->wardCode ) {
          $a["WardCode"] = $this->wardCode;
        }
        if( $this->wardDescription ) {
          $a["WardDescription"] = $this->wardDescription;
        }
        if( $this->unitCode ) {
          $a["UnitCode"] = $this->unitCode;
        }
        if( $this->unitDescription ) {
          $a["UnitDescription"] = $this->unitDescription;
        }
        if( $this->bedCode ) {
          $a["BedCode"] = $this->bedCode;
        }
        if( $this->bedDescription ) {
          $a["BedDescription"] = $this->bedDescription;
        }
        if( $this->serviceType ) {
          $a["ServiceType"] = $this->serviceType;
        }
        if( $this->careType ) {
          $a["CareType"] = $this->careType;
        }
        if( $this->doctorId ) {
          $a["DoctorId"] = $this->doctorId;
        }
        if( $this->doctorFamily ) {
          $a["DoctorFamily"] = $this->doctorFamily;
        }
        if( $this->doctorGiven ) {
          $a["doctorGiven"] = $this->doctorGiven;
        }
        if( $this->drg ) {
          $a["DRG"] = $this->drg;
        }
        if( $this->los ) {
          $a["LOS"] = $this->los;
        }
        if( $this->noOfDocuments ) {
          $a["NoOfDocuments"] = $this->noOfDocuments;
        }
        if( $this->startDate ) {
          $a["StartDate"] = $this->startDate;
        }
        if( $this->endDate ) {
          $a["EndDate"] = $this->endDate;
        }
        if( $this->financialClass ) {
          $a["FinancialClass"] = $this->financialClass;
        }
        return $a;
      }
      

      /**
       * Initializes this EpisodeDTO from an associative array
       */
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['PatientSrc']) ) {
          $this->patientSrc = $o["PatientSrc"];
        }
        if( isset($o['PatientIdNs']) ) {
          $this->patientIdNs = $o["PatientIdNs"];
        }
        if( isset($o['Up']) ) {
          $this->up = $o["Up"];
        }
        if( isset($o['src']) ) {
          $this->src = $o["src"];
        }
        if( isset($o['intId']) ) {
          $this->intId = $o["intId"];
        }
        if( isset($o['extId']) ) {
          $this->extId = $o["extId"];
        }
        if( isset($o['extNS']) ) {
          $this->extNS = $o["extNS"];
        }
        if( isset($o['patientURNO']) ) {
          $this->patientURNO = $o["patientURNO"];
        }
        if( isset($o['ward_code']) ) {
          $this->ward_code = $o["ward_code"];
        }
        if( isset($o['service_type']) ) {
          $this->service_type = $o["service_type"];
        }
        if( isset($o['care_type']) ) {
          $this->care_type = $o["care_type"];
        }
        if( isset($o['EpisodeId']) ) {
          $this->episodeId = $o["EpisodeId"];
        }
        if( isset($o['EpisodeNs']) ) {
          $this->episodeNs = $o["EpisodeNs"];
        }
        if( isset($o['Type']) ) {
          $this->type = $o["Type"];
        }
        if( isset($o['State']) ) {
          $this->state = $o["State"];
        }
        if( isset($o['Start']) ) {
          $this->start = $o["Start"];
        }
        if( isset($o['End']) ) {
          $this->end = $o["End"];
        }
        if( isset($o['Campus']) ) {
          $this->campus = $o["Campus"];
        }
        if( isset($o['WardCode']) ) {
          $this->wardCode = $o["WardCode"];
        }
        if( isset($o['WardDescription']) ) {
          $this->wardDescription = $o["WardDescription"];
        }
        if( isset($o['UnitCode']) ) {
          $this->unitCode = $o["UnitCode"];
        }
        if( isset($o['UnitDescription']) ) {
          $this->unitDescription = $o["UnitDescription"];
        }
        if( isset($o['BedCode']) ) {
          $this->bedCode = $o["BedCode"];
        }
        if( isset($o['BedDescription']) ) {
          $this->bedDescription = $o["BedDescription"];
        }
        if( isset($o['ServiceType']) ) {
          $this->serviceType = $o["ServiceType"];
        }
        if( isset($o['CareType']) ) {
          $this->careType = $o["CareType"];
        }
        if( isset($o['DoctorId']) ) {
          $this->doctorId = $o["DoctorId"];
        }
        if( isset($o['DoctorFamily']) ) {
          $this->doctorFamily = $o["DoctorFamily"];
        }
        if( isset($o['doctorGiven']) ) {
          $this->doctorGiven = $o["doctorGiven"];
        }
        if( isset($o['DRG']) ) {
          $this->drg = $o["DRG"];
        }
        if( isset($o['LOS']) ) {
          $this->los = $o["LOS"];
        }
        if( isset($o['NoOfDocuments']) ) {
          $this->noOfDocuments = $o["NoOfDocuments"];
        }
        if( isset($o['StartDate']) ) {
          $this->startDate = $o["StartDate"];
        }
        if( isset($o['EndDate']) ) {
          $this->endDate = $o["EndDate"];
        }
        if( isset($o['FinancialClass']) ) {
          $this->financialClass = $o["FinancialClass"];
        }
      }
    
    }
    
  }


  namespace Au\Com\Infomedix\Udr\Rest\Common\Dto {

    /**
     * 
     */
    class ClinicListItemDTO extends \Au\Com\Infomedix\Udr\Rest\Common\Dto\PatientComponentDTO  {
    
    
      /**
       * (no documentation provided)
       */
      private $domain;
      /**
       * (no documentation provided)
       */
      private $campus;
      /**
       * (no documentation provided)
       */
      private $code;
      /**
       * (no documentation provided)
       */
      private $listId;
      /**
       * (no documentation provided)
       */
      private $description;

      /**
       * Constructs a ClinicListItemDTO from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * (no documentation provided)
       */
      public function getDomain() {
        return $this->domain;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDomain($domain) {
        $this->domain = $domain;
      }
      /**
       * (no documentation provided)
       */
      public function getCampus() {
        return $this->campus;
      }
      
      /**
       * (no documentation provided)
       */
      public function setCampus($campus) {
        $this->campus = $campus;
      }
      /**
       * (no documentation provided)
       */
      public function getCode() {
        return $this->code;
      }
      
      /**
       * (no documentation provided)
       */
      public function setCode($code) {
        $this->code = $code;
      }
      /**
       * (no documentation provided)
       */
      public function getListId() {
        return $this->listId;
      }
      
      /**
       * (no documentation provided)
       */
      public function setListId($listId) {
        $this->listId = $listId;
      }
      /**
       * (no documentation provided)
       */
      public function getDescription() {
        return $this->description;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDescription($description) {
        $this->description = $description;
      }
      /**
       * Returns the associative array for this ClinicListItemDTO
       */
      public function toArray() {
        $a = parent::toArray();
        if( $this->domain ) {
          $a["Domain"] = $this->domain;
        }
        if( $this->campus ) {
          $a["Campus"] = $this->campus;
        }
        if( $this->code ) {
          $a["Code"] = $this->code;
        }
        if( $this->listId ) {
          $a["ListId"] = $this->listId;
        }
        if( $this->description ) {
          $a["Description"] = $this->description;
        }
        return $a;
      }
      

      /**
       * Initializes this ClinicListItemDTO from an associative array
       */
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['Domain']) ) {
          $this->domain = $o["Domain"];
        }
        if( isset($o['Campus']) ) {
          $this->campus = $o["Campus"];
        }
        if( isset($o['Code']) ) {
          $this->code = $o["Code"];
        }
        if( isset($o['ListId']) ) {
          $this->listId = $o["ListId"];
        }
        if( isset($o['Description']) ) {
          $this->description = $o["Description"];
        }
      }
    
    }
    
  }


  namespace Au\Com\Infomedix\Udr\Rest\Common\Dto {

    /**
     * 
     */
    class AlertItemDTO extends \Au\Com\Infomedix\Udr\Rest\Common\Dto\PatientComponentDTO  {
    
    
      /**
       * (no documentation provided)
       */
      private $alertNs;
      /**
       * (no documentation provided)
       */
      private $code;
      /**
       * (no documentation provided)
       */
      private $description;
      /**
       * (no documentation provided)
       */
      private $type;
      /**
       * (no documentation provided)
       */
      private $comment;
      /**
       * (no documentation provided)
       */
      private $identificationDate;

      /**
       * Constructs a AlertItemDTO from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * (no documentation provided)
       */
      public function getAlertNs() {
        return $this->alertNs;
      }
      
      /**
       * (no documentation provided)
       */
      public function setAlertNs($alertNs) {
        $this->alertNs = $alertNs;
      }
      /**
       * (no documentation provided)
       */
      public function getCode() {
        return $this->code;
      }
      
      /**
       * (no documentation provided)
       */
      public function setCode($code) {
        $this->code = $code;
      }
      /**
       * (no documentation provided)
       */
      public function getDescription() {
        return $this->description;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDescription($description) {
        $this->description = $description;
      }
      /**
       * (no documentation provided)
       */
      public function getType() {
        return $this->type;
      }
      
      /**
       * (no documentation provided)
       */
      public function setType($type) {
        $this->type = $type;
      }
      /**
       * (no documentation provided)
       */
      public function getComment() {
        return $this->comment;
      }
      
      /**
       * (no documentation provided)
       */
      public function setComment($comment) {
        $this->comment = $comment;
      }
      /**
       * (no documentation provided)
       */
      public function getIdentificationDate() {
        return $this->identificationDate;
      }
      
      /**
       * (no documentation provided)
       */
      public function setIdentificationDate($identificationDate) {
        $this->identificationDate = $identificationDate;
      }
      /**
       * Returns the associative array for this AlertItemDTO
       */
      public function toArray() {
        $a = parent::toArray();
        if( $this->alertNs ) {
          $a["AlertNs"] = $this->alertNs;
        }
        if( $this->code ) {
          $a["Code"] = $this->code;
        }
        if( $this->description ) {
          $a["Description"] = $this->description;
        }
        if( $this->type ) {
          $a["Type"] = $this->type;
        }
        if( $this->comment ) {
          $a["Comment"] = $this->comment;
        }
        if( $this->identificationDate ) {
          $a["IdentificationDate"] = $this->identificationDate;
        }
        return $a;
      }
      

      /**
       * Initializes this AlertItemDTO from an associative array
       */
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['AlertNs']) ) {
          $this->alertNs = $o["AlertNs"];
        }
        if( isset($o['Code']) ) {
          $this->code = $o["Code"];
        }
        if( isset($o['Description']) ) {
          $this->description = $o["Description"];
        }
        if( isset($o['Type']) ) {
          $this->type = $o["Type"];
        }
        if( isset($o['Comment']) ) {
          $this->comment = $o["Comment"];
        }
        if( isset($o['IdentificationDate']) ) {
          $this->identificationDate = $o["IdentificationDate"];
        }
      }
    
    }
    
  }


  namespace Au\Com\Infomedix\Udr\Rest\Common\Dto {

    /**
     * 
     */
    class AlertDTO extends \Au\Com\Infomedix\Udr\Rest\Common\Dto\PatientComponentDTO  {
    
      /**
       * (no documentation provided)
       */
      private $src;
    
      /**
       * (no documentation provided)
       */
      private $urno;
      /**
       * (no documentation provided)
       */
      private $patientNs;
      /**
       * (no documentation provided)
       */
      private $documentId;
      /**
       * (no documentation provided)
       */
      private $documentNS;
      /**
       * (no documentation provided)
       */
      private $electronicAlerts;
      /**
       * (no documentation provided)
       */
      private $scannedAlerts;

      /**
       * Constructs a AlertDTO from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * (no documentation provided)
       */
      public function getSrc() {
        return $this->src;
      }
      
      /**
       * (no documentation provided)
       */
      public function setSrc($src) {
        $this->src = $src;
      }
      /**
       * (no documentation provided)
       */
      public function getUrno() {
        return $this->urno;
      }
      
      /**
       * (no documentation provided)
       */
      public function setUrno($urno) {
        $this->urno = $urno;
      }
      /**
       * (no documentation provided)
       */
      public function getPatientNs() {
        return $this->patientNs;
      }
      
      /**
       * (no documentation provided)
       */
      public function setPatientNs($patientNs) {
        $this->patientNs = $patientNs;
      }
      /**
       * (no documentation provided)
       */
      public function getDocumentId() {
        return $this->documentId;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDocumentId($documentId) {
        $this->documentId = $documentId;
      }
      /**
       * (no documentation provided)
       */
      public function getDocumentNS() {
        return $this->documentNS;
      }
      
      /**
       * (no documentation provided)
       */
      public function setDocumentNS($documentNS) {
        $this->documentNS = $documentNS;
      }
      /**
       * (no documentation provided)
       */
      public function getElectronicAlerts() {
        return $this->electronicAlerts;
      }
      
      /**
       * (no documentation provided)
       */
      public function setElectronicAlerts($electronicAlerts) {
        $this->electronicAlerts = $electronicAlerts;
      }
      /**
       * (no documentation provided)
       */
      public function getScannedAlerts() {
        return $this->scannedAlerts;
      }
      
      /**
       * (no documentation provided)
       */
      public function setScannedAlerts($scannedAlerts) {
        $this->scannedAlerts = $scannedAlerts;
      }
      /**
       * Returns the associative array for this AlertDTO
       */
      public function toArray() {
        $a = parent::toArray();
        if( $this->src ) {
          $a["src"] = $this->src;
        }
        if( $this->urno ) {
          $a["Urno"] = $this->urno;
        }
        if( $this->patientNs ) {
          $a["PatientNs"] = $this->patientNs;
        }
        if( $this->documentId ) {
          $a["DocumentId"] = $this->documentId;
        }
        if( $this->documentNS ) {
          $a["DocumentNS"] = $this->documentNS;
        }
        if( $this->electronicAlerts ) {
          $ab = array();
          foreach( $this->electronicAlerts as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['ElectronicAlerts'] = $ab;
        }
        if( $this->scannedAlerts ) {
          $ab = array();
          foreach( $this->scannedAlerts as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['ScannedAlerts'] = $ab;
        }
        return $a;
      }
      

      /**
       * Initializes this AlertDTO from an associative array
       */
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['src']) ) {
          $this->src = $o["src"];
        }
        if( isset($o['Urno']) ) {
          $this->urno = $o["Urno"];
        }
        if( isset($o['PatientNs']) ) {
          $this->patientNs = $o["PatientNs"];
        }
        if( isset($o['DocumentId']) ) {
          $this->documentId = $o["DocumentId"];
        }
        if( isset($o['DocumentNS']) ) {
          $this->documentNS = $o["DocumentNS"];
        }
        $this->electronicAlerts = array();
        if( isset($o['ElectronicAlerts']) ) {
          foreach( $o['ElectronicAlerts'] as $i => $x ) {
            $this->electronicAlerts[$i] = new \Au\Com\Infomedix\Udr\Rest\Common\Dto\AlertItemDTO($x);
          }
        }
        $this->scannedAlerts = array();
        if( isset($o['ScannedAlerts']) ) {
          foreach( $o['ScannedAlerts'] as $i => $x ) {
            $this->scannedAlerts[$i] = new \Au\Com\Infomedix\Udr\Rest\Common\Dto\DocumentDTO($x);
          }
        }
      }
    
    }
    
  }

  
?>