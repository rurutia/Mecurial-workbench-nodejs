#
# 
#
# Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
#
require 'json'

# adding necessary json serialization methods to standard classes.
class Object
  def to_jaxb_json_hash
    return self
  end
  def self.from_json o
    return o
  end
end

class String
  def self.from_json o
    return o
  end
end

class Boolean
  def self.from_json o
    return o
  end
end

class Numeric
  def self.from_json o
    return o
  end
end

class Time
  #json time is represented as number of milliseconds since epoch
  def to_jaxb_json_hash
    return (to_i * 1000) + (usec / 1000)
  end
  def self.from_json o
    if o.nil?
      return nil
    else
      return Time.at(o / 1000, (o % 1000) * 1000)
    end
  end
end

class Array
  def to_jaxb_json_hash
    a = Array.new
    each { | _item | a.push _item.to_jaxb_json_hash }
    return a
  end
end

class Hash
  def to_jaxb_json_hash
    h = Hash.new
    each { | _key, _value | h[_key.to_jaxb_json_hash] = _value.to_jaxb_json_hash }
    return h
  end
end


module Au

module Com

module Infomedix

module Udr

module Rest

module Common

module Dto

  # 
  class ActivityFeedDTO 

    # (no documentation provided)
    attr_accessor :src
    # (no documentation provided)
    attr_accessor :urno
    # (no documentation provided)
    attr_accessor :patientNs
    # (no documentation provided)
    attr_accessor :electronicAlerts
    # (no documentation provided)
    attr_accessor :scannedAlerts
    # (no documentation provided)
    attr_accessor :documents
    # (no documentation provided)
    attr_accessor :results
    # (no documentation provided)
    attr_accessor :episodes

    # the json hash for this ActivityFeedDTO
    def to_jaxb_json_hash
      _h = {}
      _h['src'] = src.to_jaxb_json_hash unless src.nil?
      _h['Urno'] = urno.to_jaxb_json_hash unless urno.nil?
      _h['PatientNs'] = patientNs.to_jaxb_json_hash unless patientNs.nil?
      _h['ElectronicAlerts'] = electronicAlerts.to_jaxb_json_hash unless electronicAlerts.nil?
      _h['ScannedAlerts'] = scannedAlerts.to_jaxb_json_hash unless scannedAlerts.nil?
      _h['Documents'] = documents.to_jaxb_json_hash unless documents.nil?
      _h['results'] = results.to_jaxb_json_hash unless results.nil?
      _h['Episodes'] = episodes.to_jaxb_json_hash unless episodes.nil?
      return _h
    end

    # the json (string form) for this ActivityFeedDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ActivityFeedDTO with a json hash
    def init_jaxb_json_hash(_o)
      @src = String.from_json(_o['src']) unless _o['src'].nil?
      @urno = String.from_json(_o['Urno']) unless _o['Urno'].nil?
      @patientNs = String.from_json(_o['PatientNs']) unless _o['PatientNs'].nil?
      @electronicAlerts = Au::Com::Infomedix::Udr::Rest::Common::Dto::ListDTO.from_json(_o['ElectronicAlerts']) unless _o['ElectronicAlerts'].nil?
      @scannedAlerts = Au::Com::Infomedix::Udr::Rest::Common::Dto::ListDTO.from_json(_o['ScannedAlerts']) unless _o['ScannedAlerts'].nil?
      @documents = Au::Com::Infomedix::Udr::Rest::Common::Dto::ListDTO.from_json(_o['Documents']) unless _o['Documents'].nil?
      @results = Au::Com::Infomedix::Udr::Rest::Common::Dto::ListDTO.from_json(_o['results']) unless _o['results'].nil?
      @episodes = Au::Com::Infomedix::Udr::Rest::Common::Dto::ListDTO.from_json(_o['Episodes']) unless _o['Episodes'].nil?
    end

    # constructs a ActivityFeedDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Au

module Com

module Infomedix

module Cpfmodel

module Txn

  # 
  class Status 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :text
    # (no documentation provided)
    attr_accessor :orderControl

    # the json hash for this Status
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['text'] = text.to_jaxb_json_hash unless text.nil?
      _h['order_control'] = orderControl.to_jaxb_json_hash unless orderControl.nil?
      return _h
    end

    # the json (string form) for this Status
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Status with a json hash
    def init_jaxb_json_hash(_o)
      @id = String.from_json(_o['id']) unless _o['id'].nil?
      @text = String.from_json(_o['text']) unless _o['text'].nil?
      @orderControl = Au::Com::Infomedix::Cpfmodel::Txn::ItemIdent.from_json(_o['order_control']) unless _o['order_control'].nil?
    end

    # constructs a Status from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Au

module Com

module Infomedix

module Udr

module Rest

module Common

module Dto

  # 
  class AtomicDTO 

    # (no documentation provided)
    attr_accessor :valueTypeID
    # (no documentation provided)
    attr_accessor :valueTypeText
    # (no documentation provided)
    attr_accessor :value
    # (no documentation provided)
    attr_accessor :units
    # (no documentation provided)
    attr_accessor :referenceRange
    # (no documentation provided)
    attr_accessor :abnormalFLagText
    # (no documentation provided)
    attr_accessor :natureOfAbnormalTest
    # (no documentation provided)
    attr_accessor :statusText

    # the json hash for this AtomicDTO
    def to_jaxb_json_hash
      _h = {}
      _h['valueTypeID'] = valueTypeID.to_jaxb_json_hash unless valueTypeID.nil?
      _h['valueTypeText'] = valueTypeText.to_jaxb_json_hash unless valueTypeText.nil?
      _h['value'] = value.to_jaxb_json_hash unless value.nil?
      _h['units'] = units.to_jaxb_json_hash unless units.nil?
      _h['referenceRange'] = referenceRange.to_jaxb_json_hash unless referenceRange.nil?
      _h['abnormalFLagText'] = abnormalFLagText.to_jaxb_json_hash unless abnormalFLagText.nil?
      _h['natureOfAbnormalTest'] = natureOfAbnormalTest.to_jaxb_json_hash unless natureOfAbnormalTest.nil?
      _h['statusText'] = statusText.to_jaxb_json_hash unless statusText.nil?
      return _h
    end

    # the json (string form) for this AtomicDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this AtomicDTO with a json hash
    def init_jaxb_json_hash(_o)
      @valueTypeID = String.from_json(_o['valueTypeID']) unless _o['valueTypeID'].nil?
      @valueTypeText = String.from_json(_o['valueTypeText']) unless _o['valueTypeText'].nil?
      @value = String.from_json(_o['value']) unless _o['value'].nil?
      @units = String.from_json(_o['units']) unless _o['units'].nil?
      @referenceRange = String.from_json(_o['referenceRange']) unless _o['referenceRange'].nil?
      @abnormalFLagText = String.from_json(_o['abnormalFLagText']) unless _o['abnormalFLagText'].nil?
      @natureOfAbnormalTest = String.from_json(_o['natureOfAbnormalTest']) unless _o['natureOfAbnormalTest'].nil?
      @statusText = String.from_json(_o['statusText']) unless _o['statusText'].nil?
    end

    # constructs a AtomicDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Au

module Com

module Infomedix

module Udr

module Rest

module Common

module Dto

  # 
  class DocTypeSpecificDTO 


    # the json hash for this DocTypeSpecificDTO
    def to_jaxb_json_hash
      _h = {}
      return _h
    end

    # the json (string form) for this DocTypeSpecificDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this DocTypeSpecificDTO with a json hash
    def init_jaxb_json_hash(_o)
    end

    # constructs a DocTypeSpecificDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Au

module Com

module Infomedix

module Udr

module Rest

module Common

module Dto

  # 
  class EntryDTO 

    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :label

    # the json hash for this EntryDTO
    def to_jaxb_json_hash
      _h = {}
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['label'] = label.to_jaxb_json_hash unless label.nil?
      return _h
    end

    # the json (string form) for this EntryDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this EntryDTO with a json hash
    def init_jaxb_json_hash(_o)
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @label = String.from_json(_o['label']) unless _o['label'].nil?
    end

    # constructs a EntryDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Au

module Com

module Infomedix

module Udr

module Rest

module Common

module Dto

  # 
  class ExtIdDTO 

    # (no documentation provided)
    attr_accessor :extIdVal
    # (no documentation provided)
    attr_accessor :extNsVal

    # the json hash for this ExtIdDTO
    def to_jaxb_json_hash
      _h = {}
      _h['extIdVal'] = extIdVal.to_jaxb_json_hash unless extIdVal.nil?
      _h['extNsVal'] = extNsVal.to_jaxb_json_hash unless extNsVal.nil?
      return _h
    end

    # the json (string form) for this ExtIdDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ExtIdDTO with a json hash
    def init_jaxb_json_hash(_o)
      @extIdVal = String.from_json(_o['extIdVal']) unless _o['extIdVal'].nil?
      @extNsVal = String.from_json(_o['extNsVal']) unless _o['extNsVal'].nil?
    end

    # constructs a ExtIdDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Au

module Com

module Infomedix

module Udr

module Rest

module Common

module Dto

  # 
  class ListDTO 

    # (no documentation provided)
    attr_accessor :results
    # (no documentation provided)
    attr_accessor :total

    # the json hash for this ListDTO
    def to_jaxb_json_hash
      _h = {}
      if !results.nil?
        _ha = Array.new
        results.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['result'] = _ha
      end
      _h['total'] = total.to_jaxb_json_hash unless total.nil?
      return _h
    end

    # the json (string form) for this ListDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ListDTO with a json hash
    def init_jaxb_json_hash(_o)
      if !_o['result'].nil?
        @results = Array.new
        _oa = _o['result']
        _oa.each { | _item | @results.push Object.from_json(_item) }
      end
      @total = Fixnum.from_json(_o['total']) unless _o['total'].nil?
    end

    # constructs a ListDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Au

module Com

module Infomedix

module Udr

module Rest

module Common

module Dto

  # 
  class OrderDTO 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :status
    # (no documentation provided)
    attr_accessor :enteringUser
    # (no documentation provided)
    attr_accessor :actionedUser
    # (no documentation provided)
    attr_accessor :organisation
    # (no documentation provided)
    attr_accessor :doctor

    # the json hash for this OrderDTO
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      _h['enteringUser'] = enteringUser.to_jaxb_json_hash unless enteringUser.nil?
      _h['actionedUser'] = actionedUser.to_jaxb_json_hash unless actionedUser.nil?
      _h['organisation'] = organisation.to_jaxb_json_hash unless organisation.nil?
      _h['doctor'] = doctor.to_jaxb_json_hash unless doctor.nil?
      return _h
    end

    # the json (string form) for this OrderDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this OrderDTO with a json hash
    def init_jaxb_json_hash(_o)
      @id = String.from_json(_o['id']) unless _o['id'].nil?
      @status = Au::Com::Infomedix::Cpfmodel::Txn::Status.from_json(_o['status']) unless _o['status'].nil?
      @enteringUser = String.from_json(_o['enteringUser']) unless _o['enteringUser'].nil?
      @actionedUser = String.from_json(_o['actionedUser']) unless _o['actionedUser'].nil?
      @organisation = String.from_json(_o['organisation']) unless _o['organisation'].nil?
      @doctor = String.from_json(_o['doctor']) unless _o['doctor'].nil?
    end

    # constructs a OrderDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Au

module Com

module Infomedix

module Udr

module Rest

module Common

module Dto

  # 
  class PatientDTO 

    # (no documentation provided)
    attr_accessor :src
    # (no documentation provided)
    attr_accessor :extIds
    # (no documentation provided)
    attr_accessor :patientMasterId
    # (no documentation provided)
    attr_accessor :firstName
    # (no documentation provided)
    attr_accessor :lastName
    # (no documentation provided)
    attr_accessor :otherNames
    # (no documentation provided)
    attr_accessor :dob
    # (no documentation provided)
    attr_accessor :dod
    # (no documentation provided)
    attr_accessor :sex
    # (no documentation provided)
    attr_accessor :addr1
    # (no documentation provided)
    attr_accessor :addr2
    # (no documentation provided)
    attr_accessor :city
    # (no documentation provided)
    attr_accessor :postcode
    # (no documentation provided)
    attr_accessor :infoFields

    # the json hash for this PatientDTO
    def to_jaxb_json_hash
      _h = {}
      _h['src'] = src.to_jaxb_json_hash unless src.nil?
      if !extIds.nil?
        _ha = Array.new
        extIds.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['extIds'] = _ha
      end
      _h['patientMasterId'] = patientMasterId.to_jaxb_json_hash unless patientMasterId.nil?
      _h['firstName'] = firstName.to_jaxb_json_hash unless firstName.nil?
      _h['lastName'] = lastName.to_jaxb_json_hash unless lastName.nil?
      _h['otherNames'] = otherNames.to_jaxb_json_hash unless otherNames.nil?
      _h['dob'] = dob.to_jaxb_json_hash unless dob.nil?
      _h['dod'] = dod.to_jaxb_json_hash unless dod.nil?
      _h['sex'] = sex.to_jaxb_json_hash unless sex.nil?
      _h['addr1'] = addr1.to_jaxb_json_hash unless addr1.nil?
      _h['addr2'] = addr2.to_jaxb_json_hash unless addr2.nil?
      _h['city'] = city.to_jaxb_json_hash unless city.nil?
      _h['postcode'] = postcode.to_jaxb_json_hash unless postcode.nil?
      if !infoFields.nil?
        _ha = Array.new
        infoFields.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['infoFields'] = _ha
      end
      return _h
    end

    # the json (string form) for this PatientDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this PatientDTO with a json hash
    def init_jaxb_json_hash(_o)
      @src = String.from_json(_o['src']) unless _o['src'].nil?
      if !_o['extIds'].nil?
        @extIds = Array.new
        _oa = _o['extIds']
        _oa.each { | _item | @extIds.push Au::Com::Infomedix::Udr::Rest::Common::Dto::ExtIdDTO.from_json(_item) }
      end
      @patientMasterId = String.from_json(_o['patientMasterId']) unless _o['patientMasterId'].nil?
      @firstName = String.from_json(_o['firstName']) unless _o['firstName'].nil?
      @lastName = String.from_json(_o['lastName']) unless _o['lastName'].nil?
      @otherNames = String.from_json(_o['otherNames']) unless _o['otherNames'].nil?
      @dob = String.from_json(_o['dob']) unless _o['dob'].nil?
      @dod = String.from_json(_o['dod']) unless _o['dod'].nil?
      @sex = String.from_json(_o['sex']) unless _o['sex'].nil?
      @addr1 = String.from_json(_o['addr1']) unless _o['addr1'].nil?
      @addr2 = String.from_json(_o['addr2']) unless _o['addr2'].nil?
      @city = String.from_json(_o['city']) unless _o['city'].nil?
      @postcode = String.from_json(_o['postcode']) unless _o['postcode'].nil?
      if !_o['infoFields'].nil?
        @infoFields = Array.new
        _oa = _o['infoFields']
        _oa.each { | _item | @infoFields.push Au::Com::Infomedix::Udr::Rest::Common::Dto::PatientInfoFieldDTO.from_json(_item) }
      end
    end

    # constructs a PatientDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Au

module Com

module Infomedix

module Udr

module Rest

module Common

module Dto

  # 
  class PatientInfoFieldDTO 

    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :value

    # the json hash for this PatientInfoFieldDTO
    def to_jaxb_json_hash
      _h = {}
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['value'] = value.to_jaxb_json_hash unless value.nil?
      return _h
    end

    # the json (string form) for this PatientInfoFieldDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this PatientInfoFieldDTO with a json hash
    def init_jaxb_json_hash(_o)
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @value = String.from_json(_o['value']) unless _o['value'].nil?
    end

    # constructs a PatientInfoFieldDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Au

module Com

module Infomedix

module Udr

module Rest

module Common

module Dto

  # 
  class RequestDTO 

    # (no documentation provided)
    attr_accessor :requestId
    # (no documentation provided)
    attr_accessor :requestType
    # (no documentation provided)
    attr_accessor :serviceDesc
    # (no documentation provided)
    attr_accessor :requestStatus
    # (no documentation provided)
    attr_accessor :requestDate
    # (no documentation provided)
    attr_accessor :obsStart
    # (no documentation provided)
    attr_accessor :obsStop
    # (no documentation provided)
    attr_accessor :specimenRec
    # (no documentation provided)
    attr_accessor :clinicalInformation

    # the json hash for this RequestDTO
    def to_jaxb_json_hash
      _h = {}
      _h['requestId'] = requestId.to_jaxb_json_hash unless requestId.nil?
      _h['requestType'] = requestType.to_jaxb_json_hash unless requestType.nil?
      _h['serviceDesc'] = serviceDesc.to_jaxb_json_hash unless serviceDesc.nil?
      _h['requestStatus'] = requestStatus.to_jaxb_json_hash unless requestStatus.nil?
      _h['requestDate'] = requestDate.to_jaxb_json_hash unless requestDate.nil?
      _h['obsStart'] = obsStart.to_jaxb_json_hash unless obsStart.nil?
      _h['obsStop'] = obsStop.to_jaxb_json_hash unless obsStop.nil?
      _h['specimenRec'] = specimenRec.to_jaxb_json_hash unless specimenRec.nil?
      _h['clinicalInformation'] = clinicalInformation.to_jaxb_json_hash unless clinicalInformation.nil?
      return _h
    end

    # the json (string form) for this RequestDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RequestDTO with a json hash
    def init_jaxb_json_hash(_o)
      @requestId = String.from_json(_o['requestId']) unless _o['requestId'].nil?
      @requestType = String.from_json(_o['requestType']) unless _o['requestType'].nil?
      @serviceDesc = String.from_json(_o['serviceDesc']) unless _o['serviceDesc'].nil?
      @requestStatus = String.from_json(_o['requestStatus']) unless _o['requestStatus'].nil?
      @requestDate = String.from_json(_o['requestDate']) unless _o['requestDate'].nil?
      @obsStart = String.from_json(_o['obsStart']) unless _o['obsStart'].nil?
      @obsStop = String.from_json(_o['obsStop']) unless _o['obsStop'].nil?
      @specimenRec = String.from_json(_o['specimenRec']) unless _o['specimenRec'].nil?
      @clinicalInformation = String.from_json(_o['clinicalInformation']) unless _o['clinicalInformation'].nil?
    end

    # constructs a RequestDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Au

module Com

module Infomedix

module Udr

module Rest

module Common

module Dto

  # 
  class SectionDTO 

    # (no documentation provided)
    attr_accessor :src
    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :episodal
    # (no documentation provided)
    attr_accessor :diagnostic
    # (no documentation provided)
    attr_accessor :episodeType
    # (no documentation provided)
    attr_accessor :rgbColor
    # (no documentation provided)
    attr_accessor :docCount
    # (no documentation provided)
    attr_accessor :episodeCount
    # (no documentation provided)
    attr_accessor :lastModifiedTimestamp

    # the json hash for this SectionDTO
    def to_jaxb_json_hash
      _h = {}
      _h['src'] = src.to_jaxb_json_hash unless src.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['episodal'] = episodal.to_jaxb_json_hash unless episodal.nil?
      _h['diagnostic'] = diagnostic.to_jaxb_json_hash unless diagnostic.nil?
      _h['EpisodeType'] = episodeType.to_jaxb_json_hash unless episodeType.nil?
      _h['rgbColor'] = rgbColor.to_jaxb_json_hash unless rgbColor.nil?
      _h['DocCount'] = docCount.to_jaxb_json_hash unless docCount.nil?
      _h['EpisodeCount'] = episodeCount.to_jaxb_json_hash unless episodeCount.nil?
      _h['lastModifiedTimestamp'] = lastModifiedTimestamp.to_jaxb_json_hash unless lastModifiedTimestamp.nil?
      return _h
    end

    # the json (string form) for this SectionDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this SectionDTO with a json hash
    def init_jaxb_json_hash(_o)
      @src = String.from_json(_o['src']) unless _o['src'].nil?
      @id = String.from_json(_o['id']) unless _o['id'].nil?
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @episodal = Boolean.from_json(_o['episodal']) unless _o['episodal'].nil?
      @diagnostic = Boolean.from_json(_o['diagnostic']) unless _o['diagnostic'].nil?
      @episodeType = String.from_json(_o['EpisodeType']) unless _o['EpisodeType'].nil?
      @rgbColor = String.from_json(_o['rgbColor']) unless _o['rgbColor'].nil?
      @docCount = Fixnum.from_json(_o['DocCount']) unless _o['DocCount'].nil?
      @episodeCount = Fixnum.from_json(_o['EpisodeCount']) unless _o['EpisodeCount'].nil?
      @lastModifiedTimestamp = Time.from_json(_o['lastModifiedTimestamp']) unless _o['lastModifiedTimestamp'].nil?
    end

    # constructs a SectionDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Au

module Com

module Infomedix

module Udr

module Rest

module Common

module Dto

  # 
  class ResultDataDTO 

    # (no documentation provided)
    attr_accessor :report
    # (no documentation provided)
    attr_accessor :atomic
    # (no documentation provided)
    attr_accessor :order
    # (no documentation provided)
    attr_accessor :request
    # (no documentation provided)
    attr_accessor :copiesTo
    # (no documentation provided)
    attr_accessor :image

    # the json hash for this ResultDataDTO
    def to_jaxb_json_hash
      _h = {}
      if !report.nil?
        _ha = Array.new
        report.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['report'] = _ha
      end
      if !atomic.nil?
        _ha = Array.new
        atomic.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['atomic'] = _ha
      end
      _h['order'] = order.to_jaxb_json_hash unless order.nil?
      _h['request'] = request.to_jaxb_json_hash unless request.nil?
      _h['copies'] = copiesTo.to_jaxb_json_hash unless copiesTo.nil?
      _h['image'] = image.to_jaxb_json_hash unless image.nil?
      return _h
    end

    # the json (string form) for this ResultDataDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ResultDataDTO with a json hash
    def init_jaxb_json_hash(_o)
      if !_o['report'].nil?
        @report = Array.new
        _oa = _o['report']
        _oa.each { | _item | @report.push Au::Com::Infomedix::Udr::Rest::Common::Dto::ReportDTO.from_json(_item) }
      end
      if !_o['atomic'].nil?
        @atomic = Array.new
        _oa = _o['atomic']
        _oa.each { | _item | @atomic.push Au::Com::Infomedix::Udr::Rest::Common::Dto::AtomicDTO.from_json(_item) }
      end
      @order = Au::Com::Infomedix::Udr::Rest::Common::Dto::OrderDTO.from_json(_o['order']) unless _o['order'].nil?
      @request = Au::Com::Infomedix::Udr::Rest::Common::Dto::RequestDTO.from_json(_o['request']) unless _o['request'].nil?
      @copiesTo = Au::Com::Infomedix::Udr::Rest::Common::Dto::CopiesToDTO.from_json(_o['copies']) unless _o['copies'].nil?
      @image = Au::Com::Infomedix::Udr::Rest::Common::Dto::ImageDTO.from_json(_o['image']) unless _o['image'].nil?
    end

    # constructs a ResultDataDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Au

module Com

module Infomedix

module Udr

module Rest

module Common

module Dto

  # 
  class ReportDTO 

    # (no documentation provided)
    attr_accessor :text

    # the json hash for this ReportDTO
    def to_jaxb_json_hash
      _h = {}
      _h['text'] = text.to_jaxb_json_hash unless text.nil?
      return _h
    end

    # the json (string form) for this ReportDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ReportDTO with a json hash
    def init_jaxb_json_hash(_o)
      @text = String.from_json(_o['text']) unless _o['text'].nil?
    end

    # constructs a ReportDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Au

module Com

module Infomedix

module Udr

module Rest

module Common

module Dto

  # 
  class PatientComponentDTO 

    # (no documentation provided)
    attr_accessor :patientIdNs
    # (no documentation provided)
    attr_accessor :patientSrc
    # (no documentation provided)
    attr_accessor :up

    # the json hash for this PatientComponentDTO
    def to_jaxb_json_hash
      _h = {}
      _h['patientIdNs'] = patientIdNs.to_jaxb_json_hash unless patientIdNs.nil?
      _h['patientSrc'] = patientSrc.to_jaxb_json_hash unless patientSrc.nil?
      _h['up'] = up.to_jaxb_json_hash unless up.nil?
      return _h
    end

    # the json (string form) for this PatientComponentDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this PatientComponentDTO with a json hash
    def init_jaxb_json_hash(_o)
      @patientIdNs = String.from_json(_o['patientIdNs']) unless _o['patientIdNs'].nil?
      @patientSrc = String.from_json(_o['patientSrc']) unless _o['patientSrc'].nil?
      @up = String.from_json(_o['up']) unless _o['up'].nil?
    end

    # constructs a PatientComponentDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Au

module Com

module Infomedix

module Udr

module Rest

module Common

module Dto

  # 
  class ImageDTO 

    # (no documentation provided)
    attr_accessor :data
    # (no documentation provided)
    attr_accessor :ext

    # the json hash for this ImageDTO
    def to_jaxb_json_hash
      _h = {}
      _h['data'] = data.to_jaxb_json_hash unless data.nil?
      _h['ext'] = ext.to_jaxb_json_hash unless ext.nil?
      return _h
    end

    # the json (string form) for this ImageDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ImageDTO with a json hash
    def init_jaxb_json_hash(_o)
      @data = String.from_json(_o['data']) unless _o['data'].nil?
      @ext = String.from_json(_o['ext']) unless _o['ext'].nil?
    end

    # constructs a ImageDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Au

module Com

module Infomedix

module Udr

module Rest

module Common

module Dto

  # 
  class CopiesToDTO 

    # (no documentation provided)
    attr_accessor :doctor

    # the json hash for this CopiesToDTO
    def to_jaxb_json_hash
      _h = {}
      if !doctor.nil?
        _ha = Array.new
        doctor.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['doctor'] = _ha
      end
      return _h
    end

    # the json (string form) for this CopiesToDTO
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this CopiesToDTO with a json hash
    def init_jaxb_json_hash(_o)
      if !_o['doctor'].nil?
        @doctor = Array.new
        _oa = _o['doctor']
        _oa.each { | _item | @doctor.push String.from_json(_item) }
      end
    end

    # constructs a CopiesToDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Au

module Com

module Infomedix

module Cpfmodel

module Txn

  # 
  class ItemIdent 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :text

    # the json hash for this ItemIdent
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['text'] = text.to_jaxb_json_hash unless text.nil?
      return _h
    end

    # the json (string form) for this ItemIdent
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ItemIdent with a json hash
    def init_jaxb_json_hash(_o)
      @id = String.from_json(_o['id']) unless _o['id'].nil?
      @text = String.from_json(_o['text']) unless _o['text'].nil?
    end

    # constructs a ItemIdent from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Au

module Com

module Infomedix

module Udr

module Rest

module Common

module Dto

  # 
  class UnitListItemDTO < Au::Com::Infomedix::Udr::Rest::Common::Dto::PatientComponentDTO 

    # (no documentation provided)
    attr_accessor :domain
    # (no documentation provided)
    attr_accessor :campus
    # (no documentation provided)
    attr_accessor :code
    # (no documentation provided)
    attr_accessor :listId
    # (no documentation provided)
    attr_accessor :description

    # the json hash for this UnitListItemDTO
    def to_jaxb_json_hash
      _h = super
      _h['Domain'] = domain.to_jaxb_json_hash unless domain.nil?
      _h['Campus'] = campus.to_jaxb_json_hash unless campus.nil?
      _h['Code'] = code.to_jaxb_json_hash unless code.nil?
      _h['ListId'] = listId.to_jaxb_json_hash unless listId.nil?
      _h['Description'] = description.to_jaxb_json_hash unless description.nil?
      return _h
    end

    #initializes this UnitListItemDTO with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @domain = String.from_json(_o['Domain']) unless _o['Domain'].nil?
      @campus = String.from_json(_o['Campus']) unless _o['Campus'].nil?
      @code = String.from_json(_o['Code']) unless _o['Code'].nil?
      @listId = String.from_json(_o['ListId']) unless _o['ListId'].nil?
      @description = String.from_json(_o['Description']) unless _o['Description'].nil?
    end

    # constructs a UnitListItemDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Au

module Com

module Infomedix

module Udr

module Rest

module Common

module Dto

  # 
  class WardListItemDTO < Au::Com::Infomedix::Udr::Rest::Common::Dto::PatientComponentDTO 

    # (no documentation provided)
    attr_accessor :domain
    # (no documentation provided)
    attr_accessor :campus
    # (no documentation provided)
    attr_accessor :code
    # (no documentation provided)
    attr_accessor :listId
    # (no documentation provided)
    attr_accessor :description

    # the json hash for this WardListItemDTO
    def to_jaxb_json_hash
      _h = super
      _h['Domain'] = domain.to_jaxb_json_hash unless domain.nil?
      _h['Campus'] = campus.to_jaxb_json_hash unless campus.nil?
      _h['Code'] = code.to_jaxb_json_hash unless code.nil?
      _h['ListId'] = listId.to_jaxb_json_hash unless listId.nil?
      _h['Description'] = description.to_jaxb_json_hash unless description.nil?
      return _h
    end

    #initializes this WardListItemDTO with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @domain = String.from_json(_o['Domain']) unless _o['Domain'].nil?
      @campus = String.from_json(_o['Campus']) unless _o['Campus'].nil?
      @code = String.from_json(_o['Code']) unless _o['Code'].nil?
      @listId = String.from_json(_o['ListId']) unless _o['ListId'].nil?
      @description = String.from_json(_o['Description']) unless _o['Description'].nil?
    end

    # constructs a WardListItemDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Au

module Com

module Infomedix

module Udr

module Rest

module Common

module Dto

  # 
  class PatientListItemDTO < Au::Com::Infomedix::Udr::Rest::Common::Dto::PatientComponentDTO 

    # (no documentation provided)
    attr_accessor :listId
    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :isEpisodic

    # the json hash for this PatientListItemDTO
    def to_jaxb_json_hash
      _h = super
      _h['ListId'] = listId.to_jaxb_json_hash unless listId.nil?
      _h['Description'] = description.to_jaxb_json_hash unless description.nil?
      _h['IsEpisodic'] = isEpisodic.to_jaxb_json_hash unless isEpisodic.nil?
      return _h
    end

    #initializes this PatientListItemDTO with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @listId = String.from_json(_o['ListId']) unless _o['ListId'].nil?
      @description = String.from_json(_o['Description']) unless _o['Description'].nil?
      @isEpisodic = Boolean.from_json(_o['IsEpisodic']) unless _o['IsEpisodic'].nil?
    end

    # constructs a PatientListItemDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Au

module Com

module Infomedix

module Udr

module Rest

module Common

module Dto

  # 
  class PaginatedListDTO < Au::Com::Infomedix::Udr::Rest::Common::Dto::ListDTO 

    # (no documentation provided)
    attr_accessor :start
    # (no documentation provided)
    attr_accessor :size
    # (no documentation provided)
    attr_accessor :sort
    # (no documentation provided)
    attr_accessor :order

    # the json hash for this PaginatedListDTO
    def to_jaxb_json_hash
      _h = super
      _h['start'] = start.to_jaxb_json_hash unless start.nil?
      _h['size'] = size.to_jaxb_json_hash unless size.nil?
      _h['sort'] = sort.to_jaxb_json_hash unless sort.nil?
      _h['order'] = order.to_jaxb_json_hash unless order.nil?
      return _h
    end

    #initializes this PaginatedListDTO with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @start = Fixnum.from_json(_o['start']) unless _o['start'].nil?
      @size = Fixnum.from_json(_o['size']) unless _o['size'].nil?
      @sort = String.from_json(_o['sort']) unless _o['sort'].nil?
      @order = String.from_json(_o['order']) unless _o['order'].nil?
    end

    # constructs a PaginatedListDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Au

module Com

module Infomedix

module Udr

module Rest

module Common

module Dto

  # 
  class DocumentDTO < Au::Com::Infomedix::Udr::Rest::Common::Dto::PatientComponentDTO 

    # (no documentation provided)
    attr_accessor :src
    # (no documentation provided)
    attr_accessor :masterID
    # (no documentation provided)
    attr_accessor :documentCode
    # (no documentation provided)
    attr_accessor :documentDesc
    # (no documentation provided)
    attr_accessor :section
    # (no documentation provided)
    attr_accessor :episode
    # (no documentation provided)
    attr_accessor :mimeType
    # (no documentation provided)
    attr_accessor :documentDate
    # (no documentation provided)
    attr_accessor :pageNumber
    # (no documentation provided)
    attr_accessor :state
    # (no documentation provided)
    attr_accessor :urno
    # (no documentation provided)
    attr_accessor :patientNs
    # (no documentation provided)
    attr_accessor :documentSource
    # (no documentation provided)
    attr_accessor :documentTime
    # (no documentation provided)
    attr_accessor :scannedDate
    # (no documentation provided)
    attr_accessor :documentType
    # (no documentation provided)
    attr_accessor :url
    # (no documentation provided)
    attr_accessor :docTypeSpecific

    # the json hash for this DocumentDTO
    def to_jaxb_json_hash
      _h = super
      _h['src'] = src.to_jaxb_json_hash unless src.nil?
      _h['MasterID'] = masterID.to_jaxb_json_hash unless masterID.nil?
      _h['DocumentCode'] = documentCode.to_jaxb_json_hash unless documentCode.nil?
      _h['DocumentDesc'] = documentDesc.to_jaxb_json_hash unless documentDesc.nil?
      _h['Section'] = section.to_jaxb_json_hash unless section.nil?
      _h['Episode'] = episode.to_jaxb_json_hash unless episode.nil?
      _h['MimeType'] = mimeType.to_jaxb_json_hash unless mimeType.nil?
      _h['DocumentDate'] = documentDate.to_jaxb_json_hash unless documentDate.nil?
      _h['PageNumber'] = pageNumber.to_jaxb_json_hash unless pageNumber.nil?
      _h['State'] = state.to_jaxb_json_hash unless state.nil?
      _h['Urno'] = urno.to_jaxb_json_hash unless urno.nil?
      _h['PatientNs'] = patientNs.to_jaxb_json_hash unless patientNs.nil?
      _h['DocumentSource'] = documentSource.to_jaxb_json_hash unless documentSource.nil?
      _h['DocumentTime'] = documentTime.to_jaxb_json_hash unless documentTime.nil?
      _h['ScannedDate'] = scannedDate.to_jaxb_json_hash unless scannedDate.nil?
      _h['DocumentType'] = documentType.to_jaxb_json_hash unless documentType.nil?
      _h['url'] = url.to_jaxb_json_hash unless url.nil?
      _h['DocTypeSpecific'] = docTypeSpecific.to_jaxb_json_hash unless docTypeSpecific.nil?
      return _h
    end

    #initializes this DocumentDTO with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @src = String.from_json(_o['src']) unless _o['src'].nil?
      @masterID = String.from_json(_o['MasterID']) unless _o['MasterID'].nil?
      @documentCode = String.from_json(_o['DocumentCode']) unless _o['DocumentCode'].nil?
      @documentDesc = String.from_json(_o['DocumentDesc']) unless _o['DocumentDesc'].nil?
      @section = String.from_json(_o['Section']) unless _o['Section'].nil?
      @episode = String.from_json(_o['Episode']) unless _o['Episode'].nil?
      @mimeType = String.from_json(_o['MimeType']) unless _o['MimeType'].nil?
      @documentDate = String.from_json(_o['DocumentDate']) unless _o['DocumentDate'].nil?
      @pageNumber = String.from_json(_o['PageNumber']) unless _o['PageNumber'].nil?
      @state = String.from_json(_o['State']) unless _o['State'].nil?
      @urno = String.from_json(_o['Urno']) unless _o['Urno'].nil?
      @patientNs = String.from_json(_o['PatientNs']) unless _o['PatientNs'].nil?
      @documentSource = String.from_json(_o['DocumentSource']) unless _o['DocumentSource'].nil?
      @documentTime = String.from_json(_o['DocumentTime']) unless _o['DocumentTime'].nil?
      @scannedDate = String.from_json(_o['ScannedDate']) unless _o['ScannedDate'].nil?
      @documentType = String.from_json(_o['DocumentType']) unless _o['DocumentType'].nil?
      @url = String.from_json(_o['url']) unless _o['url'].nil?
      @docTypeSpecific = Au::Com::Infomedix::Udr::Rest::Common::Dto::DocTypeSpecificDTO.from_json(_o['DocTypeSpecific']) unless _o['DocTypeSpecific'].nil?
    end

    # constructs a DocumentDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Au

module Com

module Infomedix

module Udr

module Rest

module Common

module Dto

  # 
  class EpisodeDTO < Au::Com::Infomedix::Udr::Rest::Common::Dto::PatientComponentDTO 

    # (no documentation provided)
    attr_accessor :patientSrc
    # (no documentation provided)
    attr_accessor :patientIdNs
    # (no documentation provided)
    attr_accessor :up
    # (no documentation provided)
    attr_accessor :src
    # (no documentation provided)
    attr_accessor :intId
    # (no documentation provided)
    attr_accessor :extId
    # (no documentation provided)
    attr_accessor :extNS
    # (no documentation provided)
    attr_accessor :patientURNO
    # (no documentation provided)
    attr_accessor :ward_code
    # (no documentation provided)
    attr_accessor :service_type
    # (no documentation provided)
    attr_accessor :care_type
    # (no documentation provided)
    attr_accessor :episodeId
    # (no documentation provided)
    attr_accessor :episodeNs
    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :state
    # (no documentation provided)
    attr_accessor :start
    # (no documentation provided)
    attr_accessor :end
    # (no documentation provided)
    attr_accessor :campus
    # (no documentation provided)
    attr_accessor :wardCode
    # (no documentation provided)
    attr_accessor :wardDescription
    # (no documentation provided)
    attr_accessor :unitCode
    # (no documentation provided)
    attr_accessor :unitDescription
    # (no documentation provided)
    attr_accessor :bedCode
    # (no documentation provided)
    attr_accessor :bedDescription
    # (no documentation provided)
    attr_accessor :serviceType
    # (no documentation provided)
    attr_accessor :careType
    # (no documentation provided)
    attr_accessor :doctorId
    # (no documentation provided)
    attr_accessor :doctorFamily
    # (no documentation provided)
    attr_accessor :doctorGiven
    # (no documentation provided)
    attr_accessor :drg
    # (no documentation provided)
    attr_accessor :los
    # (no documentation provided)
    attr_accessor :noOfDocuments
    # (no documentation provided)
    attr_accessor :startDate
    # (no documentation provided)
    attr_accessor :endDate
    # (no documentation provided)
    attr_accessor :financialClass

    # the json hash for this EpisodeDTO
    def to_jaxb_json_hash
      _h = super
      _h['PatientSrc'] = patientSrc.to_jaxb_json_hash unless patientSrc.nil?
      _h['PatientIdNs'] = patientIdNs.to_jaxb_json_hash unless patientIdNs.nil?
      _h['Up'] = up.to_jaxb_json_hash unless up.nil?
      _h['src'] = src.to_jaxb_json_hash unless src.nil?
      _h['intId'] = intId.to_jaxb_json_hash unless intId.nil?
      _h['extId'] = extId.to_jaxb_json_hash unless extId.nil?
      _h['extNS'] = extNS.to_jaxb_json_hash unless extNS.nil?
      _h['patientURNO'] = patientURNO.to_jaxb_json_hash unless patientURNO.nil?
      _h['ward_code'] = ward_code.to_jaxb_json_hash unless ward_code.nil?
      _h['service_type'] = service_type.to_jaxb_json_hash unless service_type.nil?
      _h['care_type'] = care_type.to_jaxb_json_hash unless care_type.nil?
      _h['EpisodeId'] = episodeId.to_jaxb_json_hash unless episodeId.nil?
      _h['EpisodeNs'] = episodeNs.to_jaxb_json_hash unless episodeNs.nil?
      _h['Type'] = type.to_jaxb_json_hash unless type.nil?
      _h['State'] = state.to_jaxb_json_hash unless state.nil?
      _h['Start'] = start.to_jaxb_json_hash unless start.nil?
      _h['End'] = end.to_jaxb_json_hash unless end.nil?
      _h['Campus'] = campus.to_jaxb_json_hash unless campus.nil?
      _h['WardCode'] = wardCode.to_jaxb_json_hash unless wardCode.nil?
      _h['WardDescription'] = wardDescription.to_jaxb_json_hash unless wardDescription.nil?
      _h['UnitCode'] = unitCode.to_jaxb_json_hash unless unitCode.nil?
      _h['UnitDescription'] = unitDescription.to_jaxb_json_hash unless unitDescription.nil?
      _h['BedCode'] = bedCode.to_jaxb_json_hash unless bedCode.nil?
      _h['BedDescription'] = bedDescription.to_jaxb_json_hash unless bedDescription.nil?
      _h['ServiceType'] = serviceType.to_jaxb_json_hash unless serviceType.nil?
      _h['CareType'] = careType.to_jaxb_json_hash unless careType.nil?
      _h['DoctorId'] = doctorId.to_jaxb_json_hash unless doctorId.nil?
      _h['DoctorFamily'] = doctorFamily.to_jaxb_json_hash unless doctorFamily.nil?
      _h['doctorGiven'] = doctorGiven.to_jaxb_json_hash unless doctorGiven.nil?
      _h['DRG'] = drg.to_jaxb_json_hash unless drg.nil?
      _h['LOS'] = los.to_jaxb_json_hash unless los.nil?
      _h['NoOfDocuments'] = noOfDocuments.to_jaxb_json_hash unless noOfDocuments.nil?
      _h['StartDate'] = startDate.to_jaxb_json_hash unless startDate.nil?
      _h['EndDate'] = endDate.to_jaxb_json_hash unless endDate.nil?
      _h['FinancialClass'] = financialClass.to_jaxb_json_hash unless financialClass.nil?
      return _h
    end

    #initializes this EpisodeDTO with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @patientSrc = String.from_json(_o['PatientSrc']) unless _o['PatientSrc'].nil?
      @patientIdNs = String.from_json(_o['PatientIdNs']) unless _o['PatientIdNs'].nil?
      @up = String.from_json(_o['Up']) unless _o['Up'].nil?
      @src = String.from_json(_o['src']) unless _o['src'].nil?
      @intId = String.from_json(_o['intId']) unless _o['intId'].nil?
      @extId = String.from_json(_o['extId']) unless _o['extId'].nil?
      @extNS = String.from_json(_o['extNS']) unless _o['extNS'].nil?
      @patientURNO = String.from_json(_o['patientURNO']) unless _o['patientURNO'].nil?
      @ward_code = String.from_json(_o['ward_code']) unless _o['ward_code'].nil?
      @service_type = String.from_json(_o['service_type']) unless _o['service_type'].nil?
      @care_type = String.from_json(_o['care_type']) unless _o['care_type'].nil?
      @episodeId = String.from_json(_o['EpisodeId']) unless _o['EpisodeId'].nil?
      @episodeNs = String.from_json(_o['EpisodeNs']) unless _o['EpisodeNs'].nil?
      @type = String.from_json(_o['Type']) unless _o['Type'].nil?
      @state = String.from_json(_o['State']) unless _o['State'].nil?
      @start = String.from_json(_o['Start']) unless _o['Start'].nil?
      @end = String.from_json(_o['End']) unless _o['End'].nil?
      @campus = String.from_json(_o['Campus']) unless _o['Campus'].nil?
      @wardCode = String.from_json(_o['WardCode']) unless _o['WardCode'].nil?
      @wardDescription = String.from_json(_o['WardDescription']) unless _o['WardDescription'].nil?
      @unitCode = String.from_json(_o['UnitCode']) unless _o['UnitCode'].nil?
      @unitDescription = String.from_json(_o['UnitDescription']) unless _o['UnitDescription'].nil?
      @bedCode = String.from_json(_o['BedCode']) unless _o['BedCode'].nil?
      @bedDescription = String.from_json(_o['BedDescription']) unless _o['BedDescription'].nil?
      @serviceType = String.from_json(_o['ServiceType']) unless _o['ServiceType'].nil?
      @careType = String.from_json(_o['CareType']) unless _o['CareType'].nil?
      @doctorId = String.from_json(_o['DoctorId']) unless _o['DoctorId'].nil?
      @doctorFamily = String.from_json(_o['DoctorFamily']) unless _o['DoctorFamily'].nil?
      @doctorGiven = String.from_json(_o['doctorGiven']) unless _o['doctorGiven'].nil?
      @drg = String.from_json(_o['DRG']) unless _o['DRG'].nil?
      @los = String.from_json(_o['LOS']) unless _o['LOS'].nil?
      @noOfDocuments = String.from_json(_o['NoOfDocuments']) unless _o['NoOfDocuments'].nil?
      @startDate = String.from_json(_o['StartDate']) unless _o['StartDate'].nil?
      @endDate = String.from_json(_o['EndDate']) unless _o['EndDate'].nil?
      @financialClass = String.from_json(_o['FinancialClass']) unless _o['FinancialClass'].nil?
    end

    # constructs a EpisodeDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Au

module Com

module Infomedix

module Udr

module Rest

module Common

module Dto

  # 
  class ClinicListItemDTO < Au::Com::Infomedix::Udr::Rest::Common::Dto::PatientComponentDTO 

    # (no documentation provided)
    attr_accessor :domain
    # (no documentation provided)
    attr_accessor :campus
    # (no documentation provided)
    attr_accessor :code
    # (no documentation provided)
    attr_accessor :listId
    # (no documentation provided)
    attr_accessor :description

    # the json hash for this ClinicListItemDTO
    def to_jaxb_json_hash
      _h = super
      _h['Domain'] = domain.to_jaxb_json_hash unless domain.nil?
      _h['Campus'] = campus.to_jaxb_json_hash unless campus.nil?
      _h['Code'] = code.to_jaxb_json_hash unless code.nil?
      _h['ListId'] = listId.to_jaxb_json_hash unless listId.nil?
      _h['Description'] = description.to_jaxb_json_hash unless description.nil?
      return _h
    end

    #initializes this ClinicListItemDTO with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @domain = String.from_json(_o['Domain']) unless _o['Domain'].nil?
      @campus = String.from_json(_o['Campus']) unless _o['Campus'].nil?
      @code = String.from_json(_o['Code']) unless _o['Code'].nil?
      @listId = String.from_json(_o['ListId']) unless _o['ListId'].nil?
      @description = String.from_json(_o['Description']) unless _o['Description'].nil?
    end

    # constructs a ClinicListItemDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Au

module Com

module Infomedix

module Udr

module Rest

module Common

module Dto

  # 
  class AlertItemDTO < Au::Com::Infomedix::Udr::Rest::Common::Dto::PatientComponentDTO 

    # (no documentation provided)
    attr_accessor :alertNs
    # (no documentation provided)
    attr_accessor :code
    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :comment
    # (no documentation provided)
    attr_accessor :identificationDate

    # the json hash for this AlertItemDTO
    def to_jaxb_json_hash
      _h = super
      _h['AlertNs'] = alertNs.to_jaxb_json_hash unless alertNs.nil?
      _h['Code'] = code.to_jaxb_json_hash unless code.nil?
      _h['Description'] = description.to_jaxb_json_hash unless description.nil?
      _h['Type'] = type.to_jaxb_json_hash unless type.nil?
      _h['Comment'] = comment.to_jaxb_json_hash unless comment.nil?
      _h['IdentificationDate'] = identificationDate.to_jaxb_json_hash unless identificationDate.nil?
      return _h
    end

    #initializes this AlertItemDTO with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @alertNs = String.from_json(_o['AlertNs']) unless _o['AlertNs'].nil?
      @code = String.from_json(_o['Code']) unless _o['Code'].nil?
      @description = String.from_json(_o['Description']) unless _o['Description'].nil?
      @type = String.from_json(_o['Type']) unless _o['Type'].nil?
      @comment = String.from_json(_o['Comment']) unless _o['Comment'].nil?
      @identificationDate = String.from_json(_o['IdentificationDate']) unless _o['IdentificationDate'].nil?
    end

    # constructs a AlertItemDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Au

module Com

module Infomedix

module Udr

module Rest

module Common

module Dto

  # 
  class AlertDTO < Au::Com::Infomedix::Udr::Rest::Common::Dto::PatientComponentDTO 

    # (no documentation provided)
    attr_accessor :src
    # (no documentation provided)
    attr_accessor :urno
    # (no documentation provided)
    attr_accessor :patientNs
    # (no documentation provided)
    attr_accessor :documentId
    # (no documentation provided)
    attr_accessor :documentNS
    # (no documentation provided)
    attr_accessor :electronicAlerts
    # (no documentation provided)
    attr_accessor :scannedAlerts

    # the json hash for this AlertDTO
    def to_jaxb_json_hash
      _h = super
      _h['src'] = src.to_jaxb_json_hash unless src.nil?
      _h['Urno'] = urno.to_jaxb_json_hash unless urno.nil?
      _h['PatientNs'] = patientNs.to_jaxb_json_hash unless patientNs.nil?
      _h['DocumentId'] = documentId.to_jaxb_json_hash unless documentId.nil?
      _h['DocumentNS'] = documentNS.to_jaxb_json_hash unless documentNS.nil?
      if !electronicAlerts.nil?
        _ha = Array.new
        electronicAlerts.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['ElectronicAlerts'] = _ha
      end
      if !scannedAlerts.nil?
        _ha = Array.new
        scannedAlerts.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['ScannedAlerts'] = _ha
      end
      return _h
    end

    #initializes this AlertDTO with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @src = String.from_json(_o['src']) unless _o['src'].nil?
      @urno = String.from_json(_o['Urno']) unless _o['Urno'].nil?
      @patientNs = String.from_json(_o['PatientNs']) unless _o['PatientNs'].nil?
      @documentId = String.from_json(_o['DocumentId']) unless _o['DocumentId'].nil?
      @documentNS = String.from_json(_o['DocumentNS']) unless _o['DocumentNS'].nil?
      if !_o['ElectronicAlerts'].nil?
        @electronicAlerts = Array.new
        _oa = _o['ElectronicAlerts']
        _oa.each { | _item | @electronicAlerts.push Au::Com::Infomedix::Udr::Rest::Common::Dto::AlertItemDTO.from_json(_item) }
      end
      if !_o['ScannedAlerts'].nil?
        @scannedAlerts = Array.new
        _oa = _o['ScannedAlerts']
        _oa.each { | _item | @scannedAlerts.push Au::Com::Infomedix::Udr::Rest::Common::Dto::DocumentDTO.from_json(_item) }
      end
    end

    # constructs a AlertDTO from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end
